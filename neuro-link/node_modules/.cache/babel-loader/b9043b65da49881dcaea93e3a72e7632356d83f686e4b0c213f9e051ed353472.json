{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Cognia\\\\neuro-link\\\\src\\\\modules\\\\Cognitivo\\\\MemoriaColores.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useUser } from \"../../context/UserContext\";\nimport { sendActivity } from \"../../services/activityService\";\nimport \"./MemoriaColores.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = [{\n  id: \"blue\",\n  hex: \"#A6D8FF\"\n}, {\n  id: \"green\",\n  hex: \"#A8E6CF\"\n}, {\n  id: \"lav\",\n  hex: \"#E9D5FF\"\n}, {\n  id: \"peach\",\n  hex: \"#FFD9B3\"\n}];\nconst sleep = ms => new Promise(r => setTimeout(r, ms));\nexport default function MemoriaColores() {\n  _s();\n  const {\n    user,\n    setUser\n  } = useUser();\n  const [sequence, setSequence] = useState([]);\n  const [userInput, setUserInput] = useState([]);\n  const [level, setLevel] = useState(1);\n  const [isShowing, setIsShowing] = useState(false);\n  const [activeIndex, setActiveIndex] = useState(-1);\n  const [message, setMessage] = useState(\"\");\n  const [timeStart, setTimeStart] = useState(null);\n  useEffect(() => {\n    // iniciar primer round si quieres automático\n    // generateNewSequence(level);\n  }, []);\n  const generateNewSequence = async (lvl = level) => {\n    const len = Math.min(6, 2 + lvl); // longitud base = 2 + lvl, tope 6\n    const seq = Array.from({\n      length: len\n    }, () => Math.floor(Math.random() * COLORS.length));\n    setSequence(seq);\n    setUserInput([]);\n    setMessage(\"Observa la secuencia\");\n    await showSequence(seq);\n  };\n  const showSequence = async seq => {\n    setIsShowing(true);\n    for (let i = 0; i < seq.length; i++) {\n      setActiveIndex(seq[i]);\n      await sleep(700);\n      setActiveIndex(-1);\n      await sleep(300);\n    }\n    setIsShowing(false);\n    setTimeStart(Date.now());\n    setMessage(\"Ahora repite la secuencia\");\n  };\n  const handleColorPress = async colorIndex => {\n    if (isShowing) return;\n    const nextInput = [...userInput, colorIndex];\n    setUserInput(nextInput);\n    const expectedIndex = sequence[nextInput.length - 1];\n    if (colorIndex !== expectedIndex) {\n      setMessage(\"Casi… intenta otra vez\");\n      await finishRound(false, nextInput);\n      return;\n    }\n    if (nextInput.length === sequence.length) {\n      setMessage(\"¡Lo lograste!\");\n      await finishRound(true, nextInput);\n    }\n  };\n  const finishRound = async (success, finalInput) => {\n    const timeSec = timeStart ? Math.round((Date.now() - timeStart) / 1000) : 0;\n    const correctCount = finalInput.filter((val, idx) => sequence[idx] === val).length;\n    const errors = sequence.length - correctCount;\n    const result = {\n      user_id: user.nombre || \"anon\",\n      module: \"Cognitivo\",\n      activity_id: \"memoria_colores_01\",\n      correct: correctCount,\n      errors: errors,\n      time: timeSec,\n      focus_loss: 0\n    };\n    setUser(prev => ({\n      ...prev,\n      progreso: {\n        ...prev.progreso,\n        cognitivo: prev.progreso.cognitivo + (success ? 1 : 0)\n      }\n    }));\n    try {\n      const aiResponse = await sendActivity(result);\n      console.log(\"AI response:\", aiResponse);\n    } catch (e) {\n      console.warn(\"sendActivity fallo:\", e);\n    }\n    await sleep(800);\n    if (success) {\n      setLevel(l => l + 1);\n      setMessage(\"Preparando siguiente secuencia…\");\n      await sleep(600);\n      generateNewSequence(level + 1);\n    } else {\n      setMessage(\"Intentemos otra vez. Generando nueva secuencia…\");\n      await sleep(800);\n      generateNewSequence(1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"memoria-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Memoria de Colores \\u2014 Nivel \", level]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"memoria-msg\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"color-grid\",\n      \"aria-hidden\": isShowing,\n      children: COLORS.map((c, idx) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `color-btn ${activeIndex === idx ? \"active\" : \"\"}`,\n        style: {\n          background: c.hex\n        },\n        onClick: () => handleColorPress(idx),\n        disabled: isShowing,\n        \"aria-label\": `color-${c.id}`\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"memoria-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start-btn\",\n        onClick: () => generateNewSequence(level),\n        disabled: isShowing,\n        children: isShowing ? \"Mostrando...\" : \"Iniciar secuencia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-btn\",\n        onClick: () => {\n          setLevel(1);\n          generateNewSequence(1);\n        },\n        children: \"Reiniciar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(MemoriaColores, \"Y9gUJmmIwkvTvorXpmXzx2YxmVc=\", false, function () {\n  return [useUser];\n});\n_c = MemoriaColores;\nvar _c;\n$RefreshReg$(_c, \"MemoriaColores\");","map":{"version":3,"names":["React","useEffect","useState","useUser","sendActivity","jsxDEV","_jsxDEV","COLORS","id","hex","sleep","ms","Promise","r","setTimeout","MemoriaColores","_s","user","setUser","sequence","setSequence","userInput","setUserInput","level","setLevel","isShowing","setIsShowing","activeIndex","setActiveIndex","message","setMessage","timeStart","setTimeStart","generateNewSequence","lvl","len","Math","min","seq","Array","from","length","floor","random","showSequence","i","Date","now","handleColorPress","colorIndex","nextInput","expectedIndex","finishRound","success","finalInput","timeSec","round","correctCount","filter","val","idx","errors","result","user_id","nombre","module","activity_id","correct","time","focus_loss","prev","progreso","cognitivo","aiResponse","console","log","e","warn","l","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","c","style","background","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/User/Cognia/neuro-link/src/modules/Cognitivo/MemoriaColores.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useUser } from \"../../context/UserContext\";\r\nimport { sendActivity } from \"../../services/activityService\";\r\nimport \"./MemoriaColores.css\";\r\n\r\nconst COLORS = [\r\n  { id: \"blue\", hex: \"#A6D8FF\" },\r\n  { id: \"green\", hex: \"#A8E6CF\" },\r\n  { id: \"lav\", hex: \"#E9D5FF\" },\r\n  { id: \"peach\", hex: \"#FFD9B3\" },\r\n];\r\n\r\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\r\n\r\nexport default function MemoriaColores() {\r\n  const { user, setUser } = useUser();\r\n  const [sequence, setSequence] = useState([]);\r\n  const [userInput, setUserInput] = useState([]);\r\n  const [level, setLevel] = useState(1);\r\n  const [isShowing, setIsShowing] = useState(false);\r\n  const [activeIndex, setActiveIndex] = useState(-1);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [timeStart, setTimeStart] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // iniciar primer round si quieres automático\r\n    // generateNewSequence(level);\r\n  }, []);\r\n\r\n  const generateNewSequence = async (lvl = level) => {\r\n    const len = Math.min(6, 2 + lvl); // longitud base = 2 + lvl, tope 6\r\n    const seq = Array.from({ length: len }, () =>\r\n      Math.floor(Math.random() * COLORS.length)\r\n    );\r\n    setSequence(seq);\r\n    setUserInput([]);\r\n    setMessage(\"Observa la secuencia\");\r\n    await showSequence(seq);\r\n  };\r\n\r\n  const showSequence = async (seq) => {\r\n    setIsShowing(true);\r\n    for (let i = 0; i < seq.length; i++) {\r\n      setActiveIndex(seq[i]);\r\n      await sleep(700);\r\n      setActiveIndex(-1);\r\n      await sleep(300);\r\n    }\r\n    setIsShowing(false);\r\n    setTimeStart(Date.now());\r\n    setMessage(\"Ahora repite la secuencia\");\r\n  };\r\n\r\n  const handleColorPress = async (colorIndex) => {\r\n    if (isShowing) return;\r\n    const nextInput = [...userInput, colorIndex];\r\n    setUserInput(nextInput);\r\n\r\n    const expectedIndex = sequence[nextInput.length - 1];\r\n    if (colorIndex !== expectedIndex) {\r\n      setMessage(\"Casi… intenta otra vez\");\r\n      await finishRound(false, nextInput);\r\n      return;\r\n    }\r\n\r\n    if (nextInput.length === sequence.length) {\r\n      setMessage(\"¡Lo lograste!\");\r\n      await finishRound(true, nextInput);\r\n    }\r\n  };\r\n\r\n  const finishRound = async (success, finalInput) => {\r\n    const timeSec = timeStart ? Math.round((Date.now() - timeStart) / 1000) : 0;\r\n    const correctCount = finalInput.filter(\r\n      (val, idx) => sequence[idx] === val\r\n    ).length;\r\n    const errors = sequence.length - correctCount;\r\n\r\n    const result = {\r\n      user_id: user.nombre || \"anon\",\r\n      module: \"Cognitivo\",\r\n      activity_id: \"memoria_colores_01\",\r\n      correct: correctCount,\r\n      errors: errors,\r\n      time: timeSec,\r\n      focus_loss: 0,\r\n    };\r\n\r\n    setUser((prev) => ({\r\n      ...prev,\r\n      progreso: {\r\n        ...prev.progreso,\r\n        cognitivo: prev.progreso.cognitivo + (success ? 1 : 0),\r\n      },\r\n    }));\r\n\r\n    try {\r\n      const aiResponse = await sendActivity(result);\r\n      console.log(\"AI response:\", aiResponse);\r\n    } catch (e) {\r\n      console.warn(\"sendActivity fallo:\", e);\r\n    }\r\n\r\n    await sleep(800);\r\n    if (success) {\r\n      setLevel((l) => l + 1);\r\n      setMessage(\"Preparando siguiente secuencia…\");\r\n      await sleep(600);\r\n      generateNewSequence(level + 1);\r\n    } else {\r\n      setMessage(\"Intentemos otra vez. Generando nueva secuencia…\");\r\n      await sleep(800);\r\n      generateNewSequence(1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"memoria-container\">\r\n      <h2>Memoria de Colores — Nivel {level}</h2>\r\n      <p className=\"memoria-msg\">{message}</p>\r\n\r\n      <div className=\"color-grid\" aria-hidden={isShowing}>\r\n        {COLORS.map((c, idx) => (\r\n          <button\r\n            key={c.id}\r\n            className={`color-btn ${activeIndex === idx ? \"active\" : \"\"}`}\r\n            style={{ background: c.hex }}\r\n            onClick={() => handleColorPress(idx)}\r\n            disabled={isShowing}\r\n            aria-label={`color-${c.id}`}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"memoria-controls\">\r\n        <button\r\n          className=\"start-btn\"\r\n          onClick={() => generateNewSequence(level)}\r\n          disabled={isShowing}\r\n        >\r\n          {isShowing ? \"Mostrando...\" : \"Iniciar secuencia\"}\r\n        </button>\r\n        <button\r\n          className=\"reset-btn\"\r\n          onClick={() => {\r\n            setLevel(1);\r\n            generateNewSequence(1);\r\n          }}\r\n        >\r\n          Reiniciar\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}