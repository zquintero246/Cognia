{"ast":null,"code":"import { GroupAnimationWithThen } from 'motion-dom';\nimport { removeItem } from 'motion-utils';\nimport { animateSequence } from './sequence.mjs';\nimport { animateSubject } from './subject.mjs';\nfunction isSequence(value) {\n  return Array.isArray(value) && value.some(Array.isArray);\n}\n/**\r\n * Creates an animation function that is optionally scoped\r\n * to a specific element.\r\n */\nfunction createScopedAnimate(scope) {\n  /**\r\n   * Implementation\r\n   */\n  function scopedAnimate(subjectOrSequence, optionsOrKeyframes, options) {\n    let animations = [];\n    let animationOnComplete;\n    if (isSequence(subjectOrSequence)) {\n      animations = animateSequence(subjectOrSequence, optionsOrKeyframes, scope);\n    } else {\n      // Extract top-level onComplete so it doesn't get applied per-value\n      const {\n        onComplete,\n        ...rest\n      } = options || {};\n      if (typeof onComplete === \"function\") {\n        animationOnComplete = onComplete;\n      }\n      animations = animateSubject(subjectOrSequence, optionsOrKeyframes, rest, scope);\n    }\n    const animation = new GroupAnimationWithThen(animations);\n    if (animationOnComplete) {\n      animation.finished.then(animationOnComplete);\n    }\n    if (scope) {\n      scope.animations.push(animation);\n      animation.finished.then(() => {\n        removeItem(scope.animations, animation);\n      });\n    }\n    return animation;\n  }\n  return scopedAnimate;\n}\nconst animate = createScopedAnimate();\nexport { animate, createScopedAnimate };","map":{"version":3,"names":["GroupAnimationWithThen","removeItem","animateSequence","animateSubject","isSequence","value","Array","isArray","some","createScopedAnimate","scope","scopedAnimate","subjectOrSequence","optionsOrKeyframes","options","animations","animationOnComplete","onComplete","rest","animation","finished","then","push","animate"],"sources":["C:/Users/Zabdiel Julian/Downloads/Cognia-dev/neuro-link/node_modules/framer-motion/dist/es/animation/animate/index.mjs"],"sourcesContent":["import { GroupAnimationWithThen } from 'motion-dom';\r\nimport { removeItem } from 'motion-utils';\r\nimport { animateSequence } from './sequence.mjs';\r\nimport { animateSubject } from './subject.mjs';\r\n\r\nfunction isSequence(value) {\r\n    return Array.isArray(value) && value.some(Array.isArray);\r\n}\r\n/**\r\n * Creates an animation function that is optionally scoped\r\n * to a specific element.\r\n */\r\nfunction createScopedAnimate(scope) {\r\n    /**\r\n     * Implementation\r\n     */\r\n    function scopedAnimate(subjectOrSequence, optionsOrKeyframes, options) {\r\n        let animations = [];\r\n        let animationOnComplete;\r\n        if (isSequence(subjectOrSequence)) {\r\n            animations = animateSequence(subjectOrSequence, optionsOrKeyframes, scope);\r\n        }\r\n        else {\r\n            // Extract top-level onComplete so it doesn't get applied per-value\r\n            const { onComplete, ...rest } = options || {};\r\n            if (typeof onComplete === \"function\") {\r\n                animationOnComplete = onComplete;\r\n            }\r\n            animations = animateSubject(subjectOrSequence, optionsOrKeyframes, rest, scope);\r\n        }\r\n        const animation = new GroupAnimationWithThen(animations);\r\n        if (animationOnComplete) {\r\n            animation.finished.then(animationOnComplete);\r\n        }\r\n        if (scope) {\r\n            scope.animations.push(animation);\r\n            animation.finished.then(() => {\r\n                removeItem(scope.animations, animation);\r\n            });\r\n        }\r\n        return animation;\r\n    }\r\n    return scopedAnimate;\r\n}\r\nconst animate = createScopedAnimate();\r\n\r\nexport { animate, createScopedAnimate };\r\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,YAAY;AACnD,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,eAAe,QAAQ,gBAAgB;AAChD,SAASC,cAAc,QAAQ,eAAe;AAE9C,SAASC,UAAUA,CAACC,KAAK,EAAE;EACvB,OAAOC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,IAAIA,KAAK,CAACG,IAAI,CAACF,KAAK,CAACC,OAAO,CAAC;AAC5D;AACA;AACA;AACA;AACA;AACA,SAASE,mBAAmBA,CAACC,KAAK,EAAE;EAChC;AACJ;AACA;EACI,SAASC,aAAaA,CAACC,iBAAiB,EAAEC,kBAAkB,EAAEC,OAAO,EAAE;IACnE,IAAIC,UAAU,GAAG,EAAE;IACnB,IAAIC,mBAAmB;IACvB,IAAIZ,UAAU,CAACQ,iBAAiB,CAAC,EAAE;MAC/BG,UAAU,GAAGb,eAAe,CAACU,iBAAiB,EAAEC,kBAAkB,EAAEH,KAAK,CAAC;IAC9E,CAAC,MACI;MACD;MACA,MAAM;QAAEO,UAAU;QAAE,GAAGC;MAAK,CAAC,GAAGJ,OAAO,IAAI,CAAC,CAAC;MAC7C,IAAI,OAAOG,UAAU,KAAK,UAAU,EAAE;QAClCD,mBAAmB,GAAGC,UAAU;MACpC;MACAF,UAAU,GAAGZ,cAAc,CAACS,iBAAiB,EAAEC,kBAAkB,EAAEK,IAAI,EAAER,KAAK,CAAC;IACnF;IACA,MAAMS,SAAS,GAAG,IAAInB,sBAAsB,CAACe,UAAU,CAAC;IACxD,IAAIC,mBAAmB,EAAE;MACrBG,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACL,mBAAmB,CAAC;IAChD;IACA,IAAIN,KAAK,EAAE;MACPA,KAAK,CAACK,UAAU,CAACO,IAAI,CAACH,SAAS,CAAC;MAChCA,SAAS,CAACC,QAAQ,CAACC,IAAI,CAAC,MAAM;QAC1BpB,UAAU,CAACS,KAAK,CAACK,UAAU,EAAEI,SAAS,CAAC;MAC3C,CAAC,CAAC;IACN;IACA,OAAOA,SAAS;EACpB;EACA,OAAOR,aAAa;AACxB;AACA,MAAMY,OAAO,GAAGd,mBAAmB,CAAC,CAAC;AAErC,SAASc,OAAO,EAAEd,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}