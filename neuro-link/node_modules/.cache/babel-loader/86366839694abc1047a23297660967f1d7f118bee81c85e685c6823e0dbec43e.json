{"ast":null,"code":"import * as React from 'react';\n\n/**\r\n * Taken from https://github.com/radix-ui/primitives/blob/main/packages/react/compose-refs/src/compose-refs.tsx\r\n */\n/**\r\n * Set a given ref to a given value\r\n * This utility takes care of different types of refs: callback refs and RefObject(s)\r\n */\nfunction setRef(ref, value) {\n  if (typeof ref === \"function\") {\n    return ref(value);\n  } else if (ref !== null && ref !== undefined) {\n    ref.current = value;\n  }\n}\n/**\r\n * A utility to compose multiple refs together\r\n * Accepts callback refs and RefObject(s)\r\n */\nfunction composeRefs(...refs) {\n  return node => {\n    let hasCleanup = false;\n    const cleanups = refs.map(ref => {\n      const cleanup = setRef(ref, node);\n      if (!hasCleanup && typeof cleanup === \"function\") {\n        hasCleanup = true;\n      }\n      return cleanup;\n    });\n    // React <19 will log an error to the console if a callback ref returns a\n    // value. We don't use ref cleanups internally so this will only happen if a\n    // user's ref callback returns a value, which we only expect if they are\n    // using the cleanup functionality added in React 19.\n    if (hasCleanup) {\n      return () => {\n        for (let i = 0; i < cleanups.length; i++) {\n          const cleanup = cleanups[i];\n          if (typeof cleanup === \"function\") {\n            cleanup();\n          } else {\n            setRef(refs[i], null);\n          }\n        }\n      };\n    }\n  };\n}\n/**\r\n * A custom hook that composes multiple refs\r\n * Accepts callback refs and RefObject(s)\r\n */\nfunction useComposedRefs(...refs) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useCallback(composeRefs(...refs), refs);\n}\nexport { useComposedRefs };","map":{"version":3,"names":["React","setRef","ref","value","undefined","current","composeRefs","refs","node","hasCleanup","cleanups","map","cleanup","i","length","useComposedRefs","useCallback"],"sources":["C:/Users/Zabdiel Julian/Downloads/Cognia-dev/neuro-link/node_modules/framer-motion/dist/es/utils/use-composed-ref.mjs"],"sourcesContent":["import * as React from 'react';\r\n\r\n/**\r\n * Taken from https://github.com/radix-ui/primitives/blob/main/packages/react/compose-refs/src/compose-refs.tsx\r\n */\r\n/**\r\n * Set a given ref to a given value\r\n * This utility takes care of different types of refs: callback refs and RefObject(s)\r\n */\r\nfunction setRef(ref, value) {\r\n    if (typeof ref === \"function\") {\r\n        return ref(value);\r\n    }\r\n    else if (ref !== null && ref !== undefined) {\r\n        ref.current = value;\r\n    }\r\n}\r\n/**\r\n * A utility to compose multiple refs together\r\n * Accepts callback refs and RefObject(s)\r\n */\r\nfunction composeRefs(...refs) {\r\n    return (node) => {\r\n        let hasCleanup = false;\r\n        const cleanups = refs.map((ref) => {\r\n            const cleanup = setRef(ref, node);\r\n            if (!hasCleanup && typeof cleanup === \"function\") {\r\n                hasCleanup = true;\r\n            }\r\n            return cleanup;\r\n        });\r\n        // React <19 will log an error to the console if a callback ref returns a\r\n        // value. We don't use ref cleanups internally so this will only happen if a\r\n        // user's ref callback returns a value, which we only expect if they are\r\n        // using the cleanup functionality added in React 19.\r\n        if (hasCleanup) {\r\n            return () => {\r\n                for (let i = 0; i < cleanups.length; i++) {\r\n                    const cleanup = cleanups[i];\r\n                    if (typeof cleanup === \"function\") {\r\n                        cleanup();\r\n                    }\r\n                    else {\r\n                        setRef(refs[i], null);\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    };\r\n}\r\n/**\r\n * A custom hook that composes multiple refs\r\n * Accepts callback refs and RefObject(s)\r\n */\r\nfunction useComposedRefs(...refs) {\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    return React.useCallback(composeRefs(...refs), refs);\r\n}\r\n\r\nexport { useComposedRefs };\r\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAMA,CAACC,GAAG,EAAEC,KAAK,EAAE;EACxB,IAAI,OAAOD,GAAG,KAAK,UAAU,EAAE;IAC3B,OAAOA,GAAG,CAACC,KAAK,CAAC;EACrB,CAAC,MACI,IAAID,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKE,SAAS,EAAE;IACxCF,GAAG,CAACG,OAAO,GAAGF,KAAK;EACvB;AACJ;AACA;AACA;AACA;AACA;AACA,SAASG,WAAWA,CAAC,GAAGC,IAAI,EAAE;EAC1B,OAAQC,IAAI,IAAK;IACb,IAAIC,UAAU,GAAG,KAAK;IACtB,MAAMC,QAAQ,GAAGH,IAAI,CAACI,GAAG,CAAET,GAAG,IAAK;MAC/B,MAAMU,OAAO,GAAGX,MAAM,CAACC,GAAG,EAAEM,IAAI,CAAC;MACjC,IAAI,CAACC,UAAU,IAAI,OAAOG,OAAO,KAAK,UAAU,EAAE;QAC9CH,UAAU,GAAG,IAAI;MACrB;MACA,OAAOG,OAAO;IAClB,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA,IAAIH,UAAU,EAAE;MACZ,OAAO,MAAM;QACT,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;UACtC,MAAMD,OAAO,GAAGF,QAAQ,CAACG,CAAC,CAAC;UAC3B,IAAI,OAAOD,OAAO,KAAK,UAAU,EAAE;YAC/BA,OAAO,CAAC,CAAC;UACb,CAAC,MACI;YACDX,MAAM,CAACM,IAAI,CAACM,CAAC,CAAC,EAAE,IAAI,CAAC;UACzB;QACJ;MACJ,CAAC;IACL;EACJ,CAAC;AACL;AACA;AACA;AACA;AACA;AACA,SAASE,eAAeA,CAAC,GAAGR,IAAI,EAAE;EAC9B;EACA,OAAOP,KAAK,CAACgB,WAAW,CAACV,WAAW,CAAC,GAAGC,IAAI,CAAC,EAAEA,IAAI,CAAC;AACxD;AAEA,SAASQ,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}