{"ast":null,"code":"import { MotionGlobalConfig, noop } from 'motion-utils';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { JSAnimation } from './JSAnimation.mjs';\nimport { getFinalKeyframe } from './keyframes/get-final.mjs';\nimport { KeyframeResolver, flushKeyframeResolvers } from './keyframes/KeyframesResolver.mjs';\nimport { NativeAnimationExtended } from './NativeAnimationExtended.mjs';\nimport { canAnimate } from './utils/can-animate.mjs';\nimport { makeAnimationInstant } from './utils/make-animation-instant.mjs';\nimport { WithPromise } from './utils/WithPromise.mjs';\nimport { supportsBrowserAnimation } from './waapi/supports/waapi.mjs';\n\n/**\r\n * Maximum time allowed between an animation being created and it being\r\n * resolved for us to use the latter as the start time.\r\n *\r\n * This is to ensure that while we prefer to \"start\" an animation as soon\r\n * as it's triggered, we also want to avoid a visual jump if there's a big delay\r\n * between these two moments.\r\n */\nconst MAX_RESOLVE_DELAY = 40;\nclass AsyncMotionValueAnimation extends WithPromise {\n  constructor({\n    autoplay = true,\n    delay = 0,\n    type = \"keyframes\",\n    repeat = 0,\n    repeatDelay = 0,\n    repeatType = \"loop\",\n    keyframes,\n    name,\n    motionValue,\n    element,\n    ...options\n  }) {\n    super();\n    /**\r\n     * Bound to support return animation.stop pattern\r\n     */\n    this.stop = () => {\n      if (this._animation) {\n        this._animation.stop();\n        this.stopTimeline?.();\n      }\n      this.keyframeResolver?.cancel();\n    };\n    this.createdAt = time.now();\n    const optionsWithDefaults = {\n      autoplay,\n      delay,\n      type,\n      repeat,\n      repeatDelay,\n      repeatType,\n      name,\n      motionValue,\n      element,\n      ...options\n    };\n    const KeyframeResolver$1 = element?.KeyframeResolver || KeyframeResolver;\n    this.keyframeResolver = new KeyframeResolver$1(keyframes, (resolvedKeyframes, finalKeyframe, forced) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe, optionsWithDefaults, !forced), name, motionValue, element);\n    this.keyframeResolver?.scheduleResolve();\n  }\n  onKeyframesResolved(keyframes, finalKeyframe, options, sync) {\n    this.keyframeResolver = undefined;\n    const {\n      name,\n      type,\n      velocity,\n      delay,\n      isHandoff,\n      onUpdate\n    } = options;\n    this.resolvedAt = time.now();\n    /**\r\n     * If we can't animate this value with the resolved keyframes\r\n     * then we should complete it immediately.\r\n     */\n    if (!canAnimate(keyframes, name, type, velocity)) {\n      if (MotionGlobalConfig.instantAnimations || !delay) {\n        onUpdate?.(getFinalKeyframe(keyframes, options, finalKeyframe));\n      }\n      keyframes[0] = keyframes[keyframes.length - 1];\n      makeAnimationInstant(options);\n      options.repeat = 0;\n    }\n    /**\r\n     * Resolve startTime for the animation.\r\n     *\r\n     * This method uses the createdAt and resolvedAt to calculate the\r\n     * animation startTime. *Ideally*, we would use the createdAt time as t=0\r\n     * as the following frame would then be the first frame of the animation in\r\n     * progress, which would feel snappier.\r\n     *\r\n     * However, if there's a delay (main thread work) between the creation of\r\n     * the animation and the first commited frame, we prefer to use resolvedAt\r\n     * to avoid a sudden jump into the animation.\r\n     */\n    const startTime = sync ? !this.resolvedAt ? this.createdAt : this.resolvedAt - this.createdAt > MAX_RESOLVE_DELAY ? this.resolvedAt : this.createdAt : undefined;\n    const resolvedOptions = {\n      startTime,\n      finalKeyframe,\n      ...options,\n      keyframes\n    };\n    /**\r\n     * Animate via WAAPI if possible. If this is a handoff animation, the optimised animation will be running via\r\n     * WAAPI. Therefore, this animation must be JS to ensure it runs \"under\" the\r\n     * optimised animation.\r\n     */\n    const animation = !isHandoff && supportsBrowserAnimation(resolvedOptions) ? new NativeAnimationExtended({\n      ...resolvedOptions,\n      element: resolvedOptions.motionValue.owner.current\n    }) : new JSAnimation(resolvedOptions);\n    animation.finished.then(() => this.notifyFinished()).catch(noop);\n    if (this.pendingTimeline) {\n      this.stopTimeline = animation.attachTimeline(this.pendingTimeline);\n      this.pendingTimeline = undefined;\n    }\n    this._animation = animation;\n  }\n  get finished() {\n    if (!this._animation) {\n      return this._finished;\n    } else {\n      return this.animation.finished;\n    }\n  }\n  then(onResolve, _onReject) {\n    return this.finished.finally(onResolve).then(() => {});\n  }\n  get animation() {\n    if (!this._animation) {\n      this.keyframeResolver?.resume();\n      flushKeyframeResolvers();\n    }\n    return this._animation;\n  }\n  get duration() {\n    return this.animation.duration;\n  }\n  get iterationDuration() {\n    return this.animation.iterationDuration;\n  }\n  get time() {\n    return this.animation.time;\n  }\n  set time(newTime) {\n    this.animation.time = newTime;\n  }\n  get speed() {\n    return this.animation.speed;\n  }\n  get state() {\n    return this.animation.state;\n  }\n  set speed(newSpeed) {\n    this.animation.speed = newSpeed;\n  }\n  get startTime() {\n    return this.animation.startTime;\n  }\n  attachTimeline(timeline) {\n    if (this._animation) {\n      this.stopTimeline = this.animation.attachTimeline(timeline);\n    } else {\n      this.pendingTimeline = timeline;\n    }\n    return () => this.stop();\n  }\n  play() {\n    this.animation.play();\n  }\n  pause() {\n    this.animation.pause();\n  }\n  complete() {\n    this.animation.complete();\n  }\n  cancel() {\n    if (this._animation) {\n      this.animation.cancel();\n    }\n    this.keyframeResolver?.cancel();\n  }\n}\nexport { AsyncMotionValueAnimation };","map":{"version":3,"names":["MotionGlobalConfig","noop","time","JSAnimation","getFinalKeyframe","KeyframeResolver","flushKeyframeResolvers","NativeAnimationExtended","canAnimate","makeAnimationInstant","WithPromise","supportsBrowserAnimation","MAX_RESOLVE_DELAY","AsyncMotionValueAnimation","constructor","autoplay","delay","type","repeat","repeatDelay","repeatType","keyframes","name","motionValue","element","options","stop","_animation","stopTimeline","keyframeResolver","cancel","createdAt","now","optionsWithDefaults","KeyframeResolver$1","resolvedKeyframes","finalKeyframe","forced","onKeyframesResolved","scheduleResolve","sync","undefined","velocity","isHandoff","onUpdate","resolvedAt","instantAnimations","length","startTime","resolvedOptions","animation","owner","current","finished","then","notifyFinished","catch","pendingTimeline","attachTimeline","_finished","onResolve","_onReject","finally","resume","duration","iterationDuration","newTime","speed","state","newSpeed","timeline","play","pause","complete"],"sources":["C:/Users/Zabdiel Julian/Downloads/Cognia-dev/neuro-link/node_modules/motion-dom/dist/es/animation/AsyncMotionValueAnimation.mjs"],"sourcesContent":["import { MotionGlobalConfig, noop } from 'motion-utils';\r\nimport { time } from '../frameloop/sync-time.mjs';\r\nimport { JSAnimation } from './JSAnimation.mjs';\r\nimport { getFinalKeyframe } from './keyframes/get-final.mjs';\r\nimport { KeyframeResolver, flushKeyframeResolvers } from './keyframes/KeyframesResolver.mjs';\r\nimport { NativeAnimationExtended } from './NativeAnimationExtended.mjs';\r\nimport { canAnimate } from './utils/can-animate.mjs';\r\nimport { makeAnimationInstant } from './utils/make-animation-instant.mjs';\r\nimport { WithPromise } from './utils/WithPromise.mjs';\r\nimport { supportsBrowserAnimation } from './waapi/supports/waapi.mjs';\r\n\r\n/**\r\n * Maximum time allowed between an animation being created and it being\r\n * resolved for us to use the latter as the start time.\r\n *\r\n * This is to ensure that while we prefer to \"start\" an animation as soon\r\n * as it's triggered, we also want to avoid a visual jump if there's a big delay\r\n * between these two moments.\r\n */\r\nconst MAX_RESOLVE_DELAY = 40;\r\nclass AsyncMotionValueAnimation extends WithPromise {\r\n    constructor({ autoplay = true, delay = 0, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", keyframes, name, motionValue, element, ...options }) {\r\n        super();\r\n        /**\r\n         * Bound to support return animation.stop pattern\r\n         */\r\n        this.stop = () => {\r\n            if (this._animation) {\r\n                this._animation.stop();\r\n                this.stopTimeline?.();\r\n            }\r\n            this.keyframeResolver?.cancel();\r\n        };\r\n        this.createdAt = time.now();\r\n        const optionsWithDefaults = {\r\n            autoplay,\r\n            delay,\r\n            type,\r\n            repeat,\r\n            repeatDelay,\r\n            repeatType,\r\n            name,\r\n            motionValue,\r\n            element,\r\n            ...options,\r\n        };\r\n        const KeyframeResolver$1 = element?.KeyframeResolver || KeyframeResolver;\r\n        this.keyframeResolver = new KeyframeResolver$1(keyframes, (resolvedKeyframes, finalKeyframe, forced) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe, optionsWithDefaults, !forced), name, motionValue, element);\r\n        this.keyframeResolver?.scheduleResolve();\r\n    }\r\n    onKeyframesResolved(keyframes, finalKeyframe, options, sync) {\r\n        this.keyframeResolver = undefined;\r\n        const { name, type, velocity, delay, isHandoff, onUpdate } = options;\r\n        this.resolvedAt = time.now();\r\n        /**\r\n         * If we can't animate this value with the resolved keyframes\r\n         * then we should complete it immediately.\r\n         */\r\n        if (!canAnimate(keyframes, name, type, velocity)) {\r\n            if (MotionGlobalConfig.instantAnimations || !delay) {\r\n                onUpdate?.(getFinalKeyframe(keyframes, options, finalKeyframe));\r\n            }\r\n            keyframes[0] = keyframes[keyframes.length - 1];\r\n            makeAnimationInstant(options);\r\n            options.repeat = 0;\r\n        }\r\n        /**\r\n         * Resolve startTime for the animation.\r\n         *\r\n         * This method uses the createdAt and resolvedAt to calculate the\r\n         * animation startTime. *Ideally*, we would use the createdAt time as t=0\r\n         * as the following frame would then be the first frame of the animation in\r\n         * progress, which would feel snappier.\r\n         *\r\n         * However, if there's a delay (main thread work) between the creation of\r\n         * the animation and the first commited frame, we prefer to use resolvedAt\r\n         * to avoid a sudden jump into the animation.\r\n         */\r\n        const startTime = sync\r\n            ? !this.resolvedAt\r\n                ? this.createdAt\r\n                : this.resolvedAt - this.createdAt > MAX_RESOLVE_DELAY\r\n                    ? this.resolvedAt\r\n                    : this.createdAt\r\n            : undefined;\r\n        const resolvedOptions = {\r\n            startTime,\r\n            finalKeyframe,\r\n            ...options,\r\n            keyframes,\r\n        };\r\n        /**\r\n         * Animate via WAAPI if possible. If this is a handoff animation, the optimised animation will be running via\r\n         * WAAPI. Therefore, this animation must be JS to ensure it runs \"under\" the\r\n         * optimised animation.\r\n         */\r\n        const animation = !isHandoff && supportsBrowserAnimation(resolvedOptions)\r\n            ? new NativeAnimationExtended({\r\n                ...resolvedOptions,\r\n                element: resolvedOptions.motionValue.owner.current,\r\n            })\r\n            : new JSAnimation(resolvedOptions);\r\n        animation.finished.then(() => this.notifyFinished()).catch(noop);\r\n        if (this.pendingTimeline) {\r\n            this.stopTimeline = animation.attachTimeline(this.pendingTimeline);\r\n            this.pendingTimeline = undefined;\r\n        }\r\n        this._animation = animation;\r\n    }\r\n    get finished() {\r\n        if (!this._animation) {\r\n            return this._finished;\r\n        }\r\n        else {\r\n            return this.animation.finished;\r\n        }\r\n    }\r\n    then(onResolve, _onReject) {\r\n        return this.finished.finally(onResolve).then(() => { });\r\n    }\r\n    get animation() {\r\n        if (!this._animation) {\r\n            this.keyframeResolver?.resume();\r\n            flushKeyframeResolvers();\r\n        }\r\n        return this._animation;\r\n    }\r\n    get duration() {\r\n        return this.animation.duration;\r\n    }\r\n    get iterationDuration() {\r\n        return this.animation.iterationDuration;\r\n    }\r\n    get time() {\r\n        return this.animation.time;\r\n    }\r\n    set time(newTime) {\r\n        this.animation.time = newTime;\r\n    }\r\n    get speed() {\r\n        return this.animation.speed;\r\n    }\r\n    get state() {\r\n        return this.animation.state;\r\n    }\r\n    set speed(newSpeed) {\r\n        this.animation.speed = newSpeed;\r\n    }\r\n    get startTime() {\r\n        return this.animation.startTime;\r\n    }\r\n    attachTimeline(timeline) {\r\n        if (this._animation) {\r\n            this.stopTimeline = this.animation.attachTimeline(timeline);\r\n        }\r\n        else {\r\n            this.pendingTimeline = timeline;\r\n        }\r\n        return () => this.stop();\r\n    }\r\n    play() {\r\n        this.animation.play();\r\n    }\r\n    pause() {\r\n        this.animation.pause();\r\n    }\r\n    complete() {\r\n        this.animation.complete();\r\n    }\r\n    cancel() {\r\n        if (this._animation) {\r\n            this.animation.cancel();\r\n        }\r\n        this.keyframeResolver?.cancel();\r\n    }\r\n}\r\n\r\nexport { AsyncMotionValueAnimation };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}