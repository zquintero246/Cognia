{"ast":null,"code":"import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\nlet shouldForward = key => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n  if (typeof isValidProp !== \"function\") return;\n  // Explicitly filter our events\n  shouldForward = key => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\r\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\r\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\r\n * of these should be passed to the underlying DOM node.\r\n *\r\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\r\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\r\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\r\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\r\n *\r\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\r\n * actually required.\r\n */\ntry {\n  /**\r\n   * We attempt to import this package but require won't be defined in esm environments, in that case\r\n   * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\r\n   * in favour of explicit injection.\r\n   */\n  loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n} catch {\n  // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n  const filteredProps = {};\n  for (const key in props) {\n    /**\r\n     * values is considered a valid prop by Emotion, so if it's present\r\n     * this will be rendered out to the DOM unless explicitly filtered.\r\n     *\r\n     * We check the type as it could be used with the `feColorMatrix`\r\n     * element, which we support.\r\n     */\n    if (key === \"values\" && typeof props.values === \"object\") continue;\n    if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) ||\n    // If trying to use native HTML drag events, forward drag listeners\n    props[\"draggable\"] && key.startsWith(\"onDrag\")) {\n      filteredProps[key] = props[key];\n    }\n  }\n  return filteredProps;\n}\nexport { filterProps, loadExternalIsValidProp };","map":{"version":3,"names":["isValidMotionProp","shouldForward","key","loadExternalIsValidProp","isValidProp","startsWith","require","default","filterProps","props","isDom","forwardMotionProps","filteredProps","values"],"sources":["C:/Users/Zabdiel Julian/Downloads/Cognia-dev/neuro-link/node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs"],"sourcesContent":["import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\r\n\r\nlet shouldForward = (key) => !isValidMotionProp(key);\r\nfunction loadExternalIsValidProp(isValidProp) {\r\n    if (typeof isValidProp !== \"function\")\r\n        return;\r\n    // Explicitly filter our events\r\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\r\n}\r\n/**\r\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\r\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\r\n * of these should be passed to the underlying DOM node.\r\n *\r\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\r\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\r\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\r\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\r\n *\r\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\r\n * actually required.\r\n */\r\ntry {\r\n    /**\r\n     * We attempt to import this package but require won't be defined in esm environments, in that case\r\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\r\n     * in favour of explicit injection.\r\n     */\r\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\r\n}\r\ncatch {\r\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\r\n}\r\nfunction filterProps(props, isDom, forwardMotionProps) {\r\n    const filteredProps = {};\r\n    for (const key in props) {\r\n        /**\r\n         * values is considered a valid prop by Emotion, so if it's present\r\n         * this will be rendered out to the DOM unless explicitly filtered.\r\n         *\r\n         * We check the type as it could be used with the `feColorMatrix`\r\n         * element, which we support.\r\n         */\r\n        if (key === \"values\" && typeof props.values === \"object\")\r\n            continue;\r\n        if (shouldForward(key) ||\r\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\r\n            (!isDom && !isValidMotionProp(key)) ||\r\n            // If trying to use native HTML drag events, forward drag listeners\r\n            (props[\"draggable\"] &&\r\n                key.startsWith(\"onDrag\"))) {\r\n            filteredProps[key] =\r\n                props[key];\r\n        }\r\n    }\r\n    return filteredProps;\r\n}\r\n\r\nexport { filterProps, loadExternalIsValidProp };\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,sCAAsC;AAExE,IAAIC,aAAa,GAAIC,GAAG,IAAK,CAACF,iBAAiB,CAACE,GAAG,CAAC;AACpD,SAASC,uBAAuBA,CAACC,WAAW,EAAE;EAC1C,IAAI,OAAOA,WAAW,KAAK,UAAU,EACjC;EACJ;EACAH,aAAa,GAAIC,GAAG,IAAKA,GAAG,CAACG,UAAU,CAAC,IAAI,CAAC,GAAG,CAACL,iBAAiB,CAACE,GAAG,CAAC,GAAGE,WAAW,CAACF,GAAG,CAAC;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;EACA;AACJ;AACA;AACA;AACA;EACIC,uBAAuB,CAACG,OAAO,CAAC,wBAAwB,CAAC,CAACC,OAAO,CAAC;AACtE,CAAC,CACD,MAAM;EACF;AAAA;AAEJ,SAASC,WAAWA,CAACC,KAAK,EAAEC,KAAK,EAAEC,kBAAkB,EAAE;EACnD,MAAMC,aAAa,GAAG,CAAC,CAAC;EACxB,KAAK,MAAMV,GAAG,IAAIO,KAAK,EAAE;IACrB;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,IAAIP,GAAG,KAAK,QAAQ,IAAI,OAAOO,KAAK,CAACI,MAAM,KAAK,QAAQ,EACpD;IACJ,IAAIZ,aAAa,CAACC,GAAG,CAAC,IACjBS,kBAAkB,KAAK,IAAI,IAAIX,iBAAiB,CAACE,GAAG,CAAE,IACtD,CAACQ,KAAK,IAAI,CAACV,iBAAiB,CAACE,GAAG,CAAE;IACnC;IACCO,KAAK,CAAC,WAAW,CAAC,IACfP,GAAG,CAACG,UAAU,CAAC,QAAQ,CAAE,EAAE;MAC/BO,aAAa,CAACV,GAAG,CAAC,GACdO,KAAK,CAACP,GAAG,CAAC;IAClB;EACJ;EACA,OAAOU,aAAa;AACxB;AAEA,SAASJ,WAAW,EAAEL,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}