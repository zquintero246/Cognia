{"ast":null,"code":"function ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { createSelector } from 'reselect';\nimport range from 'es-toolkit/compat/range';\nimport * as d3Scales from 'victory-vendor/d3-scale';\nimport { selectChartLayout } from '../../context/chartLayoutContext';\nimport { checkDomainOfScale, getDomainOfStackGroups, getStackedData, getValueByDataKey, isCategoricalAxis } from '../../util/ChartUtils';\nimport { selectChartDataWithIndexes, selectChartDataWithIndexesIfNotInPanorama } from './dataSelectors';\nimport { isWellFormedNumberDomain, numericalDomainSpecifiedWithoutRequiringData, parseNumericalUserDomain } from '../../util/isDomainSpecifiedByUser';\nimport { getPercentValue, hasDuplicate, isNan, isNumber, isNumOrStr, mathSign, upperFirst } from '../../util/DataUtils';\nimport { isWellBehavedNumber } from '../../util/isWellBehavedNumber';\nimport { getNiceTickValues, getTickValuesFixedDomain } from '../../util/scale';\nimport { selectChartHeight, selectChartWidth } from './containerSelectors';\nimport { selectAllXAxes, selectAllYAxes } from './selectAllAxes';\nimport { selectChartOffsetInternal } from './selectChartOffsetInternal';\nimport { selectBrushDimensions, selectBrushSettings } from './brushSelectors';\nimport { selectBarCategoryGap, selectChartName, selectStackOffsetType } from './rootPropsSelectors';\nimport { selectAngleAxis, selectAngleAxisRange, selectRadiusAxis, selectRadiusAxisRange } from './polarAxisSelectors';\nimport { pickAxisType } from './pickAxisType';\nimport { pickAxisId } from './pickAxisId';\nimport { combineAxisRangeWithReverse } from './combiners/combineAxisRangeWithReverse';\nimport { DEFAULT_Y_AXIS_WIDTH } from '../../util/Constants';\nimport { getStackSeriesIdentifier } from '../../util/stacks/getStackSeriesIdentifier';\nimport { selectTooltipAxis } from './selectTooltipAxis';\nimport { combineDisplayedStackedData } from './combiners/combineDisplayedStackedData';\nimport { isStacked } from '../types/StackedGraphicalItem';\nvar defaultNumericDomain = [0, 'auto'];\n\n/**\n * angle, radius, X, Y, and Z axes all have domain and range and scale and associated settings\n */\n\n/**\n * X and Y axes have ticks. Z axis is never displayed and so it lacks ticks\n * and tick settings.\n */\n\n/**\n * If an axis is not explicitly defined as an element,\n * we still need to render something in the chart and we need\n * some object to hold the domain and default settings.\n */\nexport var implicitXAxis = {\n  allowDataOverflow: false,\n  allowDecimals: true,\n  allowDuplicatedCategory: true,\n  angle: 0,\n  dataKey: undefined,\n  domain: undefined,\n  height: 30,\n  hide: true,\n  id: 0,\n  includeHidden: false,\n  interval: 'preserveEnd',\n  minTickGap: 5,\n  mirror: false,\n  name: undefined,\n  orientation: 'bottom',\n  padding: {\n    left: 0,\n    right: 0\n  },\n  reversed: false,\n  scale: 'auto',\n  tick: true,\n  tickCount: 5,\n  tickFormatter: undefined,\n  ticks: undefined,\n  type: 'category',\n  unit: undefined\n};\nexport var selectXAxisSettingsNoDefaults = (state, axisId) => {\n  return state.cartesianAxis.xAxis[axisId];\n};\nexport var selectXAxisSettings = (state, axisId) => {\n  var axis = selectXAxisSettingsNoDefaults(state, axisId);\n  if (axis == null) {\n    return implicitXAxis;\n  }\n  return axis;\n};\n\n/**\n * If an axis is not explicitly defined as an element,\n * we still need to render something in the chart and we need\n * some object to hold the domain and default settings.\n */\nexport var implicitYAxis = {\n  allowDataOverflow: false,\n  allowDecimals: true,\n  allowDuplicatedCategory: true,\n  angle: 0,\n  dataKey: undefined,\n  domain: defaultNumericDomain,\n  hide: true,\n  id: 0,\n  includeHidden: false,\n  interval: 'preserveEnd',\n  minTickGap: 5,\n  mirror: false,\n  name: undefined,\n  orientation: 'left',\n  padding: {\n    top: 0,\n    bottom: 0\n  },\n  reversed: false,\n  scale: 'auto',\n  tick: true,\n  tickCount: 5,\n  tickFormatter: undefined,\n  ticks: undefined,\n  type: 'number',\n  unit: undefined,\n  width: DEFAULT_Y_AXIS_WIDTH\n};\nexport var selectYAxisSettingsNoDefaults = (state, axisId) => {\n  return state.cartesianAxis.yAxis[axisId];\n};\nexport var selectYAxisSettings = (state, axisId) => {\n  var axis = selectYAxisSettingsNoDefaults(state, axisId);\n  if (axis == null) {\n    return implicitYAxis;\n  }\n  return axis;\n};\nexport var implicitZAxis = {\n  domain: [0, 'auto'],\n  includeHidden: false,\n  reversed: false,\n  allowDataOverflow: false,\n  allowDuplicatedCategory: false,\n  dataKey: undefined,\n  id: 0,\n  name: '',\n  range: [64, 64],\n  scale: 'auto',\n  type: 'number',\n  unit: ''\n};\nexport var selectZAxisSettings = (state, axisId) => {\n  var axis = state.cartesianAxis.zAxis[axisId];\n  if (axis == null) {\n    return implicitZAxis;\n  }\n  return axis;\n};\nexport var selectBaseAxis = (state, axisType, axisId) => {\n  switch (axisType) {\n    case 'xAxis':\n      {\n        return selectXAxisSettings(state, axisId);\n      }\n    case 'yAxis':\n      {\n        return selectYAxisSettings(state, axisId);\n      }\n    case 'zAxis':\n      {\n        return selectZAxisSettings(state, axisId);\n      }\n    case 'angleAxis':\n      {\n        return selectAngleAxis(state, axisId);\n      }\n    case 'radiusAxis':\n      {\n        return selectRadiusAxis(state, axisId);\n      }\n    default:\n      throw new Error(\"Unexpected axis type: \".concat(axisType));\n  }\n};\nvar selectCartesianAxisSettings = (state, axisType, axisId) => {\n  switch (axisType) {\n    case 'xAxis':\n      {\n        return selectXAxisSettings(state, axisId);\n      }\n    case 'yAxis':\n      {\n        return selectYAxisSettings(state, axisId);\n      }\n    default:\n      throw new Error(\"Unexpected axis type: \".concat(axisType));\n  }\n};\n\n/**\n * Selects either an X or Y axis. Doesn't work with Z axis - for that, instead use selectBaseAxis.\n * @param state Root state\n * @param axisType xAxis | yAxis\n * @param axisId xAxisId | yAxisId\n * @returns axis settings object\n */\nexport var selectAxisSettings = (state, axisType, axisId) => {\n  switch (axisType) {\n    case 'xAxis':\n      {\n        return selectXAxisSettings(state, axisId);\n      }\n    case 'yAxis':\n      {\n        return selectYAxisSettings(state, axisId);\n      }\n    case 'angleAxis':\n      {\n        return selectAngleAxis(state, axisId);\n      }\n    case 'radiusAxis':\n      {\n        return selectRadiusAxis(state, axisId);\n      }\n    default:\n      throw new Error(\"Unexpected axis type: \".concat(axisType));\n  }\n};\n\n/**\n * @param state RechartsRootState\n * @return boolean true if there is at least one Bar or RadialBar\n */\nexport var selectHasBar = state => state.graphicalItems.cartesianItems.some(item => item.type === 'bar') || state.graphicalItems.polarItems.some(item => item.type === 'radialBar');\n\n/**\n * Filters CartesianGraphicalItemSettings by the relevant axis ID\n * @param axisType 'xAxis' | 'yAxis' | 'zAxis' | 'radiusAxis' | 'angleAxis'\n * @param axisId from props, defaults to 0\n *\n * @returns Predicate function that return true for CartesianGraphicalItemSettings that are relevant to the specified axis\n */\nexport function itemAxisPredicate(axisType, axisId) {\n  return item => {\n    switch (axisType) {\n      case 'xAxis':\n        // This is sensitive to the data type, as 0 !== '0'. I wonder if we should be more flexible. How does 2.x branch behave? TODO write test for that\n        return 'xAxisId' in item && item.xAxisId === axisId;\n      case 'yAxis':\n        return 'yAxisId' in item && item.yAxisId === axisId;\n      case 'zAxis':\n        return 'zAxisId' in item && item.zAxisId === axisId;\n      case 'angleAxis':\n        return 'angleAxisId' in item && item.angleAxisId === axisId;\n      case 'radiusAxis':\n        return 'radiusAxisId' in item && item.radiusAxisId === axisId;\n      default:\n        return false;\n    }\n  };\n}\nexport var selectUnfilteredCartesianItems = state => state.graphicalItems.cartesianItems;\nvar selectAxisPredicate = createSelector([pickAxisType, pickAxisId], itemAxisPredicate);\nexport var combineGraphicalItemsSettings = (graphicalItems, axisSettings, axisPredicate) => graphicalItems.filter(axisPredicate).filter(item => {\n  if ((axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.includeHidden) === true) {\n    return true;\n  }\n  return !item.hide;\n});\nexport var selectCartesianItemsSettings = createSelector([selectUnfilteredCartesianItems, selectBaseAxis, selectAxisPredicate], combineGraphicalItemsSettings);\nexport var selectStackedCartesianItemsSettings = createSelector([selectCartesianItemsSettings], cartesianItems => {\n  return cartesianItems.filter(item => item.type === 'area' || item.type === 'bar').filter(isStacked);\n});\nexport var filterGraphicalNotStackedItems = cartesianItems => cartesianItems.filter(item => !('stackId' in item) || item.stackId === undefined);\nvar selectCartesianItemsSettingsExceptStacked = createSelector([selectCartesianItemsSettings], filterGraphicalNotStackedItems);\nexport var combineGraphicalItemsData = cartesianItems => cartesianItems.map(item => item.data).filter(Boolean).flat(1);\n\n/**\n * This is a \"cheap\" selector - it returns the data but doesn't iterate them, so it is not sensitive on the array length.\n * Also does not apply dataKey yet.\n * @param state RechartsRootState\n * @returns data defined on the chart graphical items, such as Line or Scatter or Pie, and filtered with appropriate dataKey\n */\nexport var selectCartesianGraphicalItemsData = createSelector([selectCartesianItemsSettings], combineGraphicalItemsData);\nexport var combineDisplayedData = (graphicalItemsData, _ref) => {\n  var {\n    chartData = [],\n    dataStartIndex,\n    dataEndIndex\n  } = _ref;\n  if (graphicalItemsData.length > 0) {\n    /*\n     * There is no slicing when data is defined on graphical items. Why?\n     * Because Brush ignores data defined on graphical items,\n     * and does not render.\n     * So Brush will never show up in a Scatter chart for example.\n     * This is something we will need to fix.\n     *\n     * Now, when the root chart data is not defined, the dataEndIndex is 0,\n     * which means the itemsData will be sliced to an empty array anyway.\n     * But that's an implementation detail, and we can fix that too.\n     *\n     * Also, in absence of Axis dataKey, we use the dataKey from each item, respectively.\n     * This is the usual pattern for numerical axis, that is the one where bars go up:\n     * users don't specify any dataKey by default and expect the axis to \"just match the data\".\n     */\n    return graphicalItemsData;\n  }\n  return chartData.slice(dataStartIndex, dataEndIndex + 1);\n};\n\n/**\n * This selector will return all data there is in the chart: graphical items, chart root, all together.\n * Useful for figuring out an axis domain (because that needs to know of everything),\n * not useful for rendering individual graphical elements (because they need to know which data is theirs and which is not).\n *\n * This function will discard the original indexes, so it is also not useful for anything that depends on ordering.\n */\nexport var selectDisplayedData = createSelector([selectCartesianGraphicalItemsData, selectChartDataWithIndexesIfNotInPanorama], combineDisplayedData);\nexport var combineAppliedValues = (data, axisSettings, items) => {\n  if ((axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.dataKey) != null) {\n    return data.map(item => ({\n      value: getValueByDataKey(item, axisSettings.dataKey)\n    }));\n  }\n  if (items.length > 0) {\n    return items.map(item => item.dataKey).flatMap(dataKey => data.map(entry => ({\n      value: getValueByDataKey(entry, dataKey)\n    })));\n  }\n  return data.map(entry => ({\n    value: entry\n  }));\n};\n\n/**\n * This selector will return all values with the appropriate dataKey applied on them.\n * Which dataKey is appropriate depends on where it is defined.\n *\n * This is an expensive selector - it will iterate all data and compute their value using the provided dataKey.\n */\nexport var selectAllAppliedValues = createSelector([selectDisplayedData, selectBaseAxis, selectCartesianItemsSettings], combineAppliedValues);\nexport function isErrorBarRelevantForAxisType(axisType, errorBar) {\n  switch (axisType) {\n    case 'xAxis':\n      return errorBar.direction === 'x';\n    case 'yAxis':\n      return errorBar.direction === 'y';\n    default:\n      return false;\n  }\n}\n\n/**\n * This is type of \"error\" in chart. It is set by using ErrorBar, and it can represent confidence interval,\n * or gap in the data, or standard deviation, or quartiles in boxplot, or whiskers or whatever.\n *\n * We will internally represent it as a tuple of two numbers, where the first number is the lower bound and the second number is the upper bound.\n *\n * It is also true that the first number should be lower than or equal to the associated \"main value\",\n * and the second number should be higher than or equal to the associated \"main value\".\n */\n\nexport function fromMainValueToError(value) {\n  if (isNumber(value) && Number.isFinite(value)) {\n    return [value, value];\n  }\n  if (Array.isArray(value)) {\n    var minError = Math.min(...value);\n    var maxError = Math.max(...value);\n    if (!isNan(minError) && !isNan(maxError) && Number.isFinite(minError) && Number.isFinite(maxError)) {\n      return [minError, maxError];\n    }\n  }\n  return undefined;\n}\nfunction onlyAllowNumbers(data) {\n  return data.filter(v => isNumOrStr(v) || v instanceof Date).map(Number).filter(n => isNan(n) === false);\n}\n\n/**\n * @param entry One item in the 'data' array. Could be anything really - this is defined externally. This is the raw, before dataKey application\n * @param appliedValue This is the result of applying the 'main' dataKey on the `entry`.\n * @param relevantErrorBars Error bars that are relevant for the current axis and layout and all that.\n * @return either undefined or an array of ErrorValue\n */\nexport function getErrorDomainByDataKey(entry, appliedValue, relevantErrorBars) {\n  if (!relevantErrorBars || typeof appliedValue !== 'number' || isNan(appliedValue)) {\n    return [];\n  }\n  if (!relevantErrorBars.length) {\n    return [];\n  }\n  return onlyAllowNumbers(relevantErrorBars.flatMap(eb => {\n    var errorValue = getValueByDataKey(entry, eb.dataKey);\n    var lowBound, highBound;\n    if (Array.isArray(errorValue)) {\n      [lowBound, highBound] = errorValue;\n    } else {\n      lowBound = highBound = errorValue;\n    }\n    if (!isWellBehavedNumber(lowBound) || !isWellBehavedNumber(highBound)) {\n      return undefined;\n    }\n    return [appliedValue - lowBound, appliedValue + highBound];\n  }));\n}\nexport var selectDisplayedStackedData = createSelector([selectStackedCartesianItemsSettings, selectChartDataWithIndexesIfNotInPanorama, selectTooltipAxis], combineDisplayedStackedData);\nexport var combineStackGroups = (displayedData, items, stackOffsetType) => {\n  var initialItemsGroups = {};\n  var itemsGroup = items.reduce((acc, item) => {\n    if (item.stackId == null) {\n      return acc;\n    }\n    if (acc[item.stackId] == null) {\n      acc[item.stackId] = [];\n    }\n    acc[item.stackId].push(item);\n    return acc;\n  }, initialItemsGroups);\n  return Object.fromEntries(Object.entries(itemsGroup).map(_ref2 => {\n    var [stackId, graphicalItems] = _ref2;\n    var dataKeys = graphicalItems.map(getStackSeriesIdentifier);\n    return [stackId, {\n      // @ts-expect-error getStackedData requires that the input is array of objects, Recharts does not test for that\n      stackedData: getStackedData(displayedData, dataKeys, stackOffsetType),\n      graphicalItems\n    }];\n  }));\n};\n\n/**\n * Stack groups are groups of graphical items that stack on each other.\n * Stack is a function of axis type (X, Y), axis ID, and stack ID.\n * Graphical items that do not have a stack ID are not going to be present in stack groups.\n */\nexport var selectStackGroups = createSelector([selectDisplayedStackedData, selectStackedCartesianItemsSettings, selectStackOffsetType], combineStackGroups);\nexport var combineDomainOfStackGroups = (stackGroups, _ref3, axisType) => {\n  var {\n    dataStartIndex,\n    dataEndIndex\n  } = _ref3;\n  if (axisType === 'zAxis') {\n    // ZAxis ignores stacks\n    return undefined;\n  }\n  var domainOfStackGroups = getDomainOfStackGroups(stackGroups, dataStartIndex, dataEndIndex);\n  if (domainOfStackGroups != null && domainOfStackGroups[0] === 0 && domainOfStackGroups[1] === 0) {\n    return undefined;\n  }\n  return domainOfStackGroups;\n};\nexport var selectDomainOfStackGroups = createSelector([selectStackGroups, selectChartDataWithIndexes, pickAxisType], combineDomainOfStackGroups);\nexport var combineAppliedNumericalValuesIncludingErrorValues = (data, axisSettings, items, errorBars, axisType) => {\n  if (items.length > 0) {\n    return data.flatMap(entry => {\n      return items.flatMap(item => {\n        var _errorBars$item$id, _axisSettings$dataKey;\n        var relevantErrorBars = (_errorBars$item$id = errorBars[item.id]) === null || _errorBars$item$id === void 0 ? void 0 : _errorBars$item$id.filter(errorBar => isErrorBarRelevantForAxisType(axisType, errorBar));\n        var valueByDataKey = getValueByDataKey(entry, (_axisSettings$dataKey = axisSettings.dataKey) !== null && _axisSettings$dataKey !== void 0 ? _axisSettings$dataKey : item.dataKey);\n        return {\n          value: valueByDataKey,\n          errorDomain: getErrorDomainByDataKey(entry, valueByDataKey, relevantErrorBars)\n        };\n      });\n    }).filter(Boolean);\n  }\n  if ((axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.dataKey) != null) {\n    return data.map(item => ({\n      value: getValueByDataKey(item, axisSettings.dataKey),\n      errorDomain: []\n    }));\n  }\n  return data.map(entry => ({\n    value: entry,\n    errorDomain: []\n  }));\n};\nexport var selectAllErrorBarSettings = state => state.errorBars;\nvar combineRelevantErrorBarSettings = (cartesianItemsSettings, allErrorBarSettings, axisType) => {\n  return cartesianItemsSettings.flatMap(item => {\n    return allErrorBarSettings[item.id];\n  }).filter(Boolean).filter(e => {\n    return isErrorBarRelevantForAxisType(axisType, e);\n  });\n};\nexport var selectErrorBarsSettingsExceptStacked = createSelector([selectCartesianItemsSettingsExceptStacked, selectAllErrorBarSettings, pickAxisType], combineRelevantErrorBarSettings);\nexport var selectAllAppliedNumericalValuesIncludingErrorValues = createSelector([selectDisplayedData, selectBaseAxis, selectCartesianItemsSettingsExceptStacked, selectAllErrorBarSettings, pickAxisType], combineAppliedNumericalValuesIncludingErrorValues);\nfunction onlyAllowNumbersAndStringsAndDates(item) {\n  var {\n    value\n  } = item;\n  if (isNumOrStr(value) || value instanceof Date) {\n    return value;\n  }\n  return undefined;\n}\nvar computeNumericalDomain = dataWithErrorDomains => {\n  var allDataSquished = dataWithErrorDomains\n  // This flatMap has to be flat because we're creating a new array in the return value\n  .flatMap(d => [d.value, d.errorDomain])\n  // This flat is needed because a) errorDomain is an array, and b) value may be a number, or it may be a range (for Area, for example)\n  .flat(1);\n  var onlyNumbers = onlyAllowNumbers(allDataSquished);\n  if (onlyNumbers.length === 0) {\n    return undefined;\n  }\n  return [Math.min(...onlyNumbers), Math.max(...onlyNumbers)];\n};\nvar computeDomainOfTypeCategory = (allDataSquished, axisSettings, isCategorical) => {\n  var categoricalDomain = allDataSquished.map(onlyAllowNumbersAndStringsAndDates).filter(v => v != null);\n  if (isCategorical && (axisSettings.dataKey == null || axisSettings.allowDuplicatedCategory && hasDuplicate(categoricalDomain))) {\n    /*\n     * 1. In an absence of dataKey, Recharts will use array indexes as its categorical domain\n     * 2. When category axis has duplicated text, serial numbers are used to generate scale\n     */\n    return range(0, allDataSquished.length);\n  }\n  if (axisSettings.allowDuplicatedCategory) {\n    return categoricalDomain;\n  }\n  return Array.from(new Set(categoricalDomain));\n};\nexport var getDomainDefinition = axisSettings => {\n  var _axisSettings$domain;\n  if (axisSettings == null || !('domain' in axisSettings)) {\n    return defaultNumericDomain;\n  }\n  if (axisSettings.domain != null) {\n    return axisSettings.domain;\n  }\n  if (axisSettings.ticks != null) {\n    if (axisSettings.type === 'number') {\n      var allValues = onlyAllowNumbers(axisSettings.ticks);\n      return [Math.min(...allValues), Math.max(...allValues)];\n    }\n    if (axisSettings.type === 'category') {\n      return axisSettings.ticks.map(String);\n    }\n  }\n  return (_axisSettings$domain = axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.domain) !== null && _axisSettings$domain !== void 0 ? _axisSettings$domain : defaultNumericDomain;\n};\nexport var mergeDomains = function mergeDomains() {\n  for (var _len = arguments.length, domains = new Array(_len), _key = 0; _key < _len; _key++) {\n    domains[_key] = arguments[_key];\n  }\n  var allDomains = domains.filter(Boolean);\n  if (allDomains.length === 0) {\n    return undefined;\n  }\n  var allValues = allDomains.flat();\n  var min = Math.min(...allValues);\n  var max = Math.max(...allValues);\n  return [min, max];\n};\nexport var selectReferenceDots = state => state.referenceElements.dots;\nexport var filterReferenceElements = (elements, axisType, axisId) => {\n  return elements.filter(el => el.ifOverflow === 'extendDomain').filter(el => {\n    if (axisType === 'xAxis') {\n      return el.xAxisId === axisId;\n    }\n    return el.yAxisId === axisId;\n  });\n};\nexport var selectReferenceDotsByAxis = createSelector([selectReferenceDots, pickAxisType, pickAxisId], filterReferenceElements);\nexport var selectReferenceAreas = state => state.referenceElements.areas;\nexport var selectReferenceAreasByAxis = createSelector([selectReferenceAreas, pickAxisType, pickAxisId], filterReferenceElements);\nexport var selectReferenceLines = state => state.referenceElements.lines;\nexport var selectReferenceLinesByAxis = createSelector([selectReferenceLines, pickAxisType, pickAxisId], filterReferenceElements);\nexport var combineDotsDomain = (dots, axisType) => {\n  var allCoords = onlyAllowNumbers(dots.map(dot => axisType === 'xAxis' ? dot.x : dot.y));\n  if (allCoords.length === 0) {\n    return undefined;\n  }\n  return [Math.min(...allCoords), Math.max(...allCoords)];\n};\nvar selectReferenceDotsDomain = createSelector(selectReferenceDotsByAxis, pickAxisType, combineDotsDomain);\nexport var combineAreasDomain = (areas, axisType) => {\n  var allCoords = onlyAllowNumbers(areas.flatMap(area => [axisType === 'xAxis' ? area.x1 : area.y1, axisType === 'xAxis' ? area.x2 : area.y2]));\n  if (allCoords.length === 0) {\n    return undefined;\n  }\n  return [Math.min(...allCoords), Math.max(...allCoords)];\n};\nvar selectReferenceAreasDomain = createSelector([selectReferenceAreasByAxis, pickAxisType], combineAreasDomain);\nexport var combineLinesDomain = (lines, axisType) => {\n  var allCoords = onlyAllowNumbers(lines.map(line => axisType === 'xAxis' ? line.x : line.y));\n  if (allCoords.length === 0) {\n    return undefined;\n  }\n  return [Math.min(...allCoords), Math.max(...allCoords)];\n};\nvar selectReferenceLinesDomain = createSelector(selectReferenceLinesByAxis, pickAxisType, combineLinesDomain);\nvar selectReferenceElementsDomain = createSelector(selectReferenceDotsDomain, selectReferenceLinesDomain, selectReferenceAreasDomain, (dotsDomain, linesDomain, areasDomain) => {\n  return mergeDomains(dotsDomain, areasDomain, linesDomain);\n});\nexport var selectDomainDefinition = createSelector([selectBaseAxis], getDomainDefinition);\nexport var combineNumericalDomain = (axisSettings, domainDefinition, domainOfStackGroups, allDataWithErrorDomains, referenceElementsDomain, layout, axisType) => {\n  var domainFromUserPreference = numericalDomainSpecifiedWithoutRequiringData(domainDefinition, axisSettings.allowDataOverflow);\n  if (domainFromUserPreference != null) {\n    // We're done! No need to compute anything else.\n    return domainFromUserPreference;\n  }\n  var shouldIncludeDomainOfStackGroups = layout === 'vertical' && axisType === 'xAxis' || layout === 'horizontal' && axisType === 'yAxis';\n  var mergedDomains = shouldIncludeDomainOfStackGroups ? mergeDomains(domainOfStackGroups, referenceElementsDomain, computeNumericalDomain(allDataWithErrorDomains)) : mergeDomains(referenceElementsDomain, computeNumericalDomain(allDataWithErrorDomains));\n  return parseNumericalUserDomain(domainDefinition, mergedDomains, axisSettings.allowDataOverflow);\n};\nexport var selectNumericalDomain = createSelector([selectBaseAxis, selectDomainDefinition, selectDomainOfStackGroups, selectAllAppliedNumericalValuesIncludingErrorValues, selectReferenceElementsDomain, selectChartLayout, pickAxisType], combineNumericalDomain);\n\n/**\n * Expand by design maps everything between 0 and 1,\n * there is nothing to compute.\n * See https://d3js.org/d3-shape/stack#stack-offsets\n */\nvar expandDomain = [0, 1];\nexport var combineAxisDomain = (axisSettings, layout, displayedData, allAppliedValues, stackOffsetType, axisType, numericalDomain) => {\n  if ((axisSettings == null || displayedData == null || displayedData.length === 0) && numericalDomain === undefined) {\n    return undefined;\n  }\n  var {\n    dataKey,\n    type\n  } = axisSettings;\n  var isCategorical = isCategoricalAxis(layout, axisType);\n  if (isCategorical && dataKey == null) {\n    return range(0, displayedData.length);\n  }\n  if (type === 'category') {\n    return computeDomainOfTypeCategory(allAppliedValues, axisSettings, isCategorical);\n  }\n  if (stackOffsetType === 'expand') {\n    return expandDomain;\n  }\n  return numericalDomain;\n};\nexport var selectAxisDomain = createSelector([selectBaseAxis, selectChartLayout, selectDisplayedData, selectAllAppliedValues, selectStackOffsetType, pickAxisType, selectNumericalDomain], combineAxisDomain);\nexport var combineRealScaleType = (axisConfig, layout, hasBar, chartType, axisType) => {\n  if (axisConfig == null) {\n    return undefined;\n  }\n  var {\n    scale,\n    type\n  } = axisConfig;\n  if (scale === 'auto') {\n    if (layout === 'radial' && axisType === 'radiusAxis') {\n      return 'band';\n    }\n    if (layout === 'radial' && axisType === 'angleAxis') {\n      return 'linear';\n    }\n    if (type === 'category' && chartType && (chartType.indexOf('LineChart') >= 0 || chartType.indexOf('AreaChart') >= 0 || chartType.indexOf('ComposedChart') >= 0 && !hasBar)) {\n      return 'point';\n    }\n    if (type === 'category') {\n      return 'band';\n    }\n    return 'linear';\n  }\n  if (typeof scale === 'string') {\n    var name = \"scale\".concat(upperFirst(scale));\n    return name in d3Scales ? name : 'point';\n  }\n  return undefined;\n};\nexport var selectRealScaleType = createSelector([selectBaseAxis, selectChartLayout, selectHasBar, selectChartName, pickAxisType], combineRealScaleType);\nfunction getD3ScaleFromType(realScaleType) {\n  if (realScaleType == null) {\n    return undefined;\n  }\n  if (realScaleType in d3Scales) {\n    // @ts-expect-error we should do better type verification here\n    return d3Scales[realScaleType]();\n  }\n  var name = \"scale\".concat(upperFirst(realScaleType));\n  if (name in d3Scales) {\n    // @ts-expect-error we should do better type verification here\n    return d3Scales[name]();\n  }\n  return undefined;\n}\nexport function combineScaleFunction(axis, realScaleType, axisDomain, axisRange) {\n  if (axisDomain == null || axisRange == null) {\n    return undefined;\n  }\n  if (typeof axis.scale === 'function') {\n    // @ts-expect-error we're going to assume here that if axis.scale is a function then it is a d3Scale function\n    return axis.scale.copy().domain(axisDomain).range(axisRange);\n  }\n  var d3ScaleFunction = getD3ScaleFromType(realScaleType);\n  if (d3ScaleFunction == null) {\n    return undefined;\n  }\n  var scale = d3ScaleFunction.domain(axisDomain).range(axisRange);\n  // I don't like this function because it mutates the scale. We should come up with a way to compute the domain up front.\n  checkDomainOfScale(scale);\n  return scale;\n}\nexport var combineNiceTicks = (axisDomain, axisSettings, realScaleType) => {\n  var domainDefinition = getDomainDefinition(axisSettings);\n  if (realScaleType !== 'auto' && realScaleType !== 'linear') {\n    return undefined;\n  }\n  if (axisSettings != null && axisSettings.tickCount && Array.isArray(domainDefinition) && (domainDefinition[0] === 'auto' || domainDefinition[1] === 'auto') && isWellFormedNumberDomain(axisDomain)) {\n    return getNiceTickValues(axisDomain, axisSettings.tickCount, axisSettings.allowDecimals);\n  }\n  if (axisSettings != null && axisSettings.tickCount && axisSettings.type === 'number' && isWellFormedNumberDomain(axisDomain)) {\n    return getTickValuesFixedDomain(axisDomain, axisSettings.tickCount, axisSettings.allowDecimals);\n  }\n  return undefined;\n};\nexport var selectNiceTicks = createSelector([selectAxisDomain, selectAxisSettings, selectRealScaleType], combineNiceTicks);\nexport var combineAxisDomainWithNiceTicks = (axisSettings, domain, niceTicks, axisType) => {\n  if (\n  /*\n   * Angle axis for some reason uses nice ticks when rendering axis tick labels,\n   * but doesn't use nice ticks for extending domain like all the other axes do.\n   * Not really sure why? Is there a good reason,\n   * or is it just because someone added support for nice ticks to the other axes and forgot this one?\n   */\n  axisType !== 'angleAxis' && (axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.type) === 'number' && isWellFormedNumberDomain(domain) && Array.isArray(niceTicks) && niceTicks.length > 0) {\n    var minFromDomain = domain[0];\n    var minFromTicks = niceTicks[0];\n    var maxFromDomain = domain[1];\n    var maxFromTicks = niceTicks[niceTicks.length - 1];\n    return [Math.min(minFromDomain, minFromTicks), Math.max(maxFromDomain, maxFromTicks)];\n  }\n  return domain;\n};\nexport var selectAxisDomainIncludingNiceTicks = createSelector([selectBaseAxis, selectAxisDomain, selectNiceTicks, pickAxisType], combineAxisDomainWithNiceTicks);\n\n/**\n * Returns the smallest gap, between two numbers in the data, as a ratio of the whole range (max - min).\n * Ignores domain provided by user and only considers domain from data.\n *\n * The result is a number between 0 and 1.\n */\nexport var selectSmallestDistanceBetweenValues = createSelector(selectAllAppliedValues, selectBaseAxis, (allDataSquished, axisSettings) => {\n  if (!axisSettings || axisSettings.type !== 'number') {\n    return undefined;\n  }\n  var smallestDistanceBetweenValues = Infinity;\n  var sortedValues = Array.from(onlyAllowNumbers(allDataSquished.map(d => d.value))).sort((a, b) => a - b);\n  if (sortedValues.length < 2) {\n    return Infinity;\n  }\n  var diff = sortedValues[sortedValues.length - 1] - sortedValues[0];\n  if (diff === 0) {\n    return Infinity;\n  }\n  // Only do n - 1 distance calculations because there's only n - 1 distances between n values.\n  for (var i = 0; i < sortedValues.length - 1; i++) {\n    var distance = sortedValues[i + 1] - sortedValues[i];\n    smallestDistanceBetweenValues = Math.min(smallestDistanceBetweenValues, distance);\n  }\n  return smallestDistanceBetweenValues / diff;\n});\nvar selectCalculatedPadding = createSelector(selectSmallestDistanceBetweenValues, selectChartLayout, selectBarCategoryGap, selectChartOffsetInternal, (_1, _2, _3, padding) => padding, (smallestDistanceInPercent, layout, barCategoryGap, offset, padding) => {\n  if (!isWellBehavedNumber(smallestDistanceInPercent)) {\n    return 0;\n  }\n  var rangeWidth = layout === 'vertical' ? offset.height : offset.width;\n  if (padding === 'gap') {\n    return smallestDistanceInPercent * rangeWidth / 2;\n  }\n  if (padding === 'no-gap') {\n    var gap = getPercentValue(barCategoryGap, smallestDistanceInPercent * rangeWidth);\n    var halfBand = smallestDistanceInPercent * rangeWidth / 2;\n    return halfBand - gap - (halfBand - gap) / rangeWidth * gap;\n  }\n  return 0;\n});\nexport var selectCalculatedXAxisPadding = (state, axisId) => {\n  var xAxisSettings = selectXAxisSettings(state, axisId);\n  if (xAxisSettings == null || typeof xAxisSettings.padding !== 'string') {\n    return 0;\n  }\n  return selectCalculatedPadding(state, 'xAxis', axisId, xAxisSettings.padding);\n};\nexport var selectCalculatedYAxisPadding = (state, axisId) => {\n  var yAxisSettings = selectYAxisSettings(state, axisId);\n  if (yAxisSettings == null || typeof yAxisSettings.padding !== 'string') {\n    return 0;\n  }\n  return selectCalculatedPadding(state, 'yAxis', axisId, yAxisSettings.padding);\n};\nvar selectXAxisPadding = createSelector(selectXAxisSettings, selectCalculatedXAxisPadding, (xAxisSettings, calculated) => {\n  var _padding$left, _padding$right;\n  if (xAxisSettings == null) {\n    return {\n      left: 0,\n      right: 0\n    };\n  }\n  var {\n    padding\n  } = xAxisSettings;\n  if (typeof padding === 'string') {\n    return {\n      left: calculated,\n      right: calculated\n    };\n  }\n  return {\n    left: ((_padding$left = padding.left) !== null && _padding$left !== void 0 ? _padding$left : 0) + calculated,\n    right: ((_padding$right = padding.right) !== null && _padding$right !== void 0 ? _padding$right : 0) + calculated\n  };\n});\nvar selectYAxisPadding = createSelector(selectYAxisSettings, selectCalculatedYAxisPadding, (yAxisSettings, calculated) => {\n  var _padding$top, _padding$bottom;\n  if (yAxisSettings == null) {\n    return {\n      top: 0,\n      bottom: 0\n    };\n  }\n  var {\n    padding\n  } = yAxisSettings;\n  if (typeof padding === 'string') {\n    return {\n      top: calculated,\n      bottom: calculated\n    };\n  }\n  return {\n    top: ((_padding$top = padding.top) !== null && _padding$top !== void 0 ? _padding$top : 0) + calculated,\n    bottom: ((_padding$bottom = padding.bottom) !== null && _padding$bottom !== void 0 ? _padding$bottom : 0) + calculated\n  };\n});\nexport var combineXAxisRange = createSelector([selectChartOffsetInternal, selectXAxisPadding, selectBrushDimensions, selectBrushSettings, (_state, _axisId, isPanorama) => isPanorama], (offset, padding, brushDimensions, _ref4, isPanorama) => {\n  var {\n    padding: brushPadding\n  } = _ref4;\n  if (isPanorama) {\n    return [brushPadding.left, brushDimensions.width - brushPadding.right];\n  }\n  return [offset.left + padding.left, offset.left + offset.width - padding.right];\n});\nexport var combineYAxisRange = createSelector([selectChartOffsetInternal, selectChartLayout, selectYAxisPadding, selectBrushDimensions, selectBrushSettings, (_state, _axisId, isPanorama) => isPanorama], (offset, layout, padding, brushDimensions, _ref5, isPanorama) => {\n  var {\n    padding: brushPadding\n  } = _ref5;\n  if (isPanorama) {\n    return [brushDimensions.height - brushPadding.bottom, brushPadding.top];\n  }\n  if (layout === 'horizontal') {\n    return [offset.top + offset.height - padding.bottom, offset.top + padding.top];\n  }\n  return [offset.top + padding.top, offset.top + offset.height - padding.bottom];\n});\nexport var selectAxisRange = (state, axisType, axisId, isPanorama) => {\n  var _selectZAxisSettings;\n  switch (axisType) {\n    case 'xAxis':\n      return combineXAxisRange(state, axisId, isPanorama);\n    case 'yAxis':\n      return combineYAxisRange(state, axisId, isPanorama);\n    case 'zAxis':\n      return (_selectZAxisSettings = selectZAxisSettings(state, axisId)) === null || _selectZAxisSettings === void 0 ? void 0 : _selectZAxisSettings.range;\n    case 'angleAxis':\n      return selectAngleAxisRange(state);\n    case 'radiusAxis':\n      return selectRadiusAxisRange(state, axisId);\n    default:\n      return undefined;\n  }\n};\nexport var selectAxisRangeWithReverse = createSelector([selectBaseAxis, selectAxisRange], combineAxisRangeWithReverse);\nexport var selectAxisScale = createSelector([selectBaseAxis, selectRealScaleType, selectAxisDomainIncludingNiceTicks, selectAxisRangeWithReverse], combineScaleFunction);\nexport var selectErrorBarsSettings = createSelector([selectCartesianItemsSettings, selectAllErrorBarSettings, pickAxisType], combineRelevantErrorBarSettings);\nfunction compareIds(a, b) {\n  if (a.id < b.id) {\n    return -1;\n  }\n  if (a.id > b.id) {\n    return 1;\n  }\n  return 0;\n}\nvar pickAxisOrientation = (_state, orientation) => orientation;\nvar pickMirror = (_state, _orientation, mirror) => mirror;\nvar selectAllXAxesWithOffsetType = createSelector(selectAllXAxes, pickAxisOrientation, pickMirror, (allAxes, orientation, mirror) => allAxes.filter(axis => axis.orientation === orientation).filter(axis => axis.mirror === mirror).sort(compareIds));\nvar selectAllYAxesWithOffsetType = createSelector(selectAllYAxes, pickAxisOrientation, pickMirror, (allAxes, orientation, mirror) => allAxes.filter(axis => axis.orientation === orientation).filter(axis => axis.mirror === mirror).sort(compareIds));\nvar getXAxisSize = (offset, axisSettings) => {\n  return {\n    width: offset.width,\n    height: axisSettings.height\n  };\n};\nvar getYAxisSize = (offset, axisSettings) => {\n  var width = typeof axisSettings.width === 'number' ? axisSettings.width : DEFAULT_Y_AXIS_WIDTH;\n  return {\n    width,\n    height: offset.height\n  };\n};\nexport var selectXAxisSize = createSelector(selectChartOffsetInternal, selectXAxisSettings, getXAxisSize);\nvar combineXAxisPositionStartingPoint = (offset, orientation, chartHeight) => {\n  switch (orientation) {\n    case 'top':\n      return offset.top;\n    case 'bottom':\n      return chartHeight - offset.bottom;\n    default:\n      return 0;\n  }\n};\nvar combineYAxisPositionStartingPoint = (offset, orientation, chartWidth) => {\n  switch (orientation) {\n    case 'left':\n      return offset.left;\n    case 'right':\n      return chartWidth - offset.right;\n    default:\n      return 0;\n  }\n};\nexport var selectAllXAxesOffsetSteps = createSelector(selectChartHeight, selectChartOffsetInternal, selectAllXAxesWithOffsetType, pickAxisOrientation, pickMirror, (chartHeight, offset, allAxesWithSameOffsetType, orientation, mirror) => {\n  var steps = {};\n  var position;\n  allAxesWithSameOffsetType.forEach(axis => {\n    var axisSize = getXAxisSize(offset, axis);\n    if (position == null) {\n      position = combineXAxisPositionStartingPoint(offset, orientation, chartHeight);\n    }\n    var needSpace = orientation === 'top' && !mirror || orientation === 'bottom' && mirror;\n    steps[axis.id] = position - Number(needSpace) * axisSize.height;\n    position += (needSpace ? -1 : 1) * axisSize.height;\n  });\n  return steps;\n});\nexport var selectAllYAxesOffsetSteps = createSelector(selectChartWidth, selectChartOffsetInternal, selectAllYAxesWithOffsetType, pickAxisOrientation, pickMirror, (chartWidth, offset, allAxesWithSameOffsetType, orientation, mirror) => {\n  var steps = {};\n  var position;\n  allAxesWithSameOffsetType.forEach(axis => {\n    var axisSize = getYAxisSize(offset, axis);\n    if (position == null) {\n      position = combineYAxisPositionStartingPoint(offset, orientation, chartWidth);\n    }\n    var needSpace = orientation === 'left' && !mirror || orientation === 'right' && mirror;\n    steps[axis.id] = position - Number(needSpace) * axisSize.width;\n    position += (needSpace ? -1 : 1) * axisSize.width;\n  });\n  return steps;\n});\nvar selectXAxisOffsetSteps = (state, axisId) => {\n  var axisSettings = selectXAxisSettings(state, axisId);\n  if (axisSettings == null) {\n    return undefined;\n  }\n  return selectAllXAxesOffsetSteps(state, axisSettings.orientation, axisSettings.mirror);\n};\nexport var selectXAxisPosition = createSelector([selectChartOffsetInternal, selectXAxisSettings, selectXAxisOffsetSteps, (_, axisId) => axisId], (offset, axisSettings, allSteps, axisId) => {\n  if (axisSettings == null) {\n    return undefined;\n  }\n  var stepOfThisAxis = allSteps === null || allSteps === void 0 ? void 0 : allSteps[axisId];\n  if (stepOfThisAxis == null) {\n    return {\n      x: offset.left,\n      y: 0\n    };\n  }\n  return {\n    x: offset.left,\n    y: stepOfThisAxis\n  };\n});\nvar selectYAxisOffsetSteps = (state, axisId) => {\n  var axisSettings = selectYAxisSettings(state, axisId);\n  if (axisSettings == null) {\n    return undefined;\n  }\n  return selectAllYAxesOffsetSteps(state, axisSettings.orientation, axisSettings.mirror);\n};\nexport var selectYAxisPosition = createSelector([selectChartOffsetInternal, selectYAxisSettings, selectYAxisOffsetSteps, (_, axisId) => axisId], (offset, axisSettings, allSteps, axisId) => {\n  if (axisSettings == null) {\n    return undefined;\n  }\n  var stepOfThisAxis = allSteps === null || allSteps === void 0 ? void 0 : allSteps[axisId];\n  if (stepOfThisAxis == null) {\n    return {\n      x: 0,\n      y: offset.top\n    };\n  }\n  return {\n    x: stepOfThisAxis,\n    y: offset.top\n  };\n});\nexport var selectYAxisSize = createSelector(selectChartOffsetInternal, selectYAxisSettings, (offset, axisSettings) => {\n  var width = typeof axisSettings.width === 'number' ? axisSettings.width : DEFAULT_Y_AXIS_WIDTH;\n  return {\n    width,\n    height: offset.height\n  };\n});\nexport var selectCartesianAxisSize = (state, axisType, axisId) => {\n  switch (axisType) {\n    case 'xAxis':\n      {\n        return selectXAxisSize(state, axisId).width;\n      }\n    case 'yAxis':\n      {\n        return selectYAxisSize(state, axisId).height;\n      }\n    default:\n      {\n        return undefined;\n      }\n  }\n};\nexport var combineDuplicateDomain = (chartLayout, appliedValues, axis, axisType) => {\n  if (axis == null) {\n    return undefined;\n  }\n  var {\n    allowDuplicatedCategory,\n    type,\n    dataKey\n  } = axis;\n  var isCategorical = isCategoricalAxis(chartLayout, axisType);\n  var allData = appliedValues.map(av => av.value);\n  if (dataKey && isCategorical && type === 'category' && allowDuplicatedCategory && hasDuplicate(allData)) {\n    return allData;\n  }\n  return undefined;\n};\nexport var selectDuplicateDomain = createSelector([selectChartLayout, selectAllAppliedValues, selectBaseAxis, pickAxisType], combineDuplicateDomain);\nexport var combineCategoricalDomain = (layout, appliedValues, axis, axisType) => {\n  if (axis == null || axis.dataKey == null) {\n    return undefined;\n  }\n  var {\n    type,\n    scale\n  } = axis;\n  var isCategorical = isCategoricalAxis(layout, axisType);\n  if (isCategorical && (type === 'number' || scale !== 'auto')) {\n    return appliedValues.map(d => d.value);\n  }\n  return undefined;\n};\nexport var selectCategoricalDomain = createSelector([selectChartLayout, selectAllAppliedValues, selectAxisSettings, pickAxisType], combineCategoricalDomain);\nexport var selectAxisPropsNeededForCartesianGridTicksGenerator = createSelector([selectChartLayout, selectCartesianAxisSettings, selectRealScaleType, selectAxisScale, selectDuplicateDomain, selectCategoricalDomain, selectAxisRange, selectNiceTicks, pickAxisType], (layout, axis, realScaleType, scale, duplicateDomain, categoricalDomain, axisRange, niceTicks, axisType) => {\n  if (axis == null) {\n    return null;\n  }\n  var isCategorical = isCategoricalAxis(layout, axisType);\n  return {\n    angle: axis.angle,\n    interval: axis.interval,\n    minTickGap: axis.minTickGap,\n    orientation: axis.orientation,\n    tick: axis.tick,\n    tickCount: axis.tickCount,\n    tickFormatter: axis.tickFormatter,\n    ticks: axis.ticks,\n    type: axis.type,\n    unit: axis.unit,\n    axisType,\n    categoricalDomain,\n    duplicateDomain,\n    isCategorical,\n    niceTicks,\n    range: axisRange,\n    realScaleType,\n    scale\n  };\n});\nexport var combineAxisTicks = (layout, axis, realScaleType, scale, niceTicks, axisRange, duplicateDomain, categoricalDomain, axisType) => {\n  if (axis == null || scale == null) {\n    return undefined;\n  }\n  var isCategorical = isCategoricalAxis(layout, axisType);\n  var {\n    type,\n    ticks,\n    tickCount\n  } = axis;\n\n  // This is testing for `scaleBand` but for band axis the type is reported as `band` so this looks like a dead code with a workaround elsewhere?\n  var offsetForBand = realScaleType === 'scaleBand' && typeof scale.bandwidth === 'function' ? scale.bandwidth() / 2 : 2;\n  var offset = type === 'category' && scale.bandwidth ? scale.bandwidth() / offsetForBand : 0;\n  offset = axisType === 'angleAxis' && axisRange != null && axisRange.length >= 2 ? mathSign(axisRange[0] - axisRange[1]) * 2 * offset : offset;\n\n  // The ticks set by user should only affect the ticks adjacent to axis line\n  var ticksOrNiceTicks = ticks || niceTicks;\n  if (ticksOrNiceTicks) {\n    var result = ticksOrNiceTicks.map((entry, index) => {\n      var scaleContent = duplicateDomain ? duplicateDomain.indexOf(entry) : entry;\n      return {\n        index,\n        // If the scaleContent is not a number, the coordinate will be NaN.\n        // That could be the case for example with a PointScale and a string as domain.\n        coordinate: scale(scaleContent) + offset,\n        value: entry,\n        offset\n      };\n    });\n    return result.filter(row => !isNan(row.coordinate));\n  }\n\n  // When axis is a categorical axis, but the type of axis is number or the scale of axis is not \"auto\"\n  if (isCategorical && categoricalDomain) {\n    return categoricalDomain.map((entry, index) => ({\n      coordinate: scale(entry) + offset,\n      value: entry,\n      index,\n      offset\n    }));\n  }\n  if (scale.ticks) {\n    return scale.ticks(tickCount)\n    // @ts-expect-error why does the offset go here? The type does not require it\n    .map(entry => ({\n      coordinate: scale(entry) + offset,\n      value: entry,\n      offset\n    }));\n  }\n\n  // When axis has duplicated text, serial numbers are used to generate scale\n  return scale.domain().map((entry, index) => ({\n    coordinate: scale(entry) + offset,\n    value: duplicateDomain ? duplicateDomain[entry] : entry,\n    index,\n    offset\n  }));\n};\nexport var selectTicksOfAxis = createSelector([selectChartLayout, selectAxisSettings, selectRealScaleType, selectAxisScale, selectNiceTicks, selectAxisRange, selectDuplicateDomain, selectCategoricalDomain, pickAxisType], combineAxisTicks);\nexport var combineGraphicalItemTicks = (layout, axis, scale, axisRange, duplicateDomain, categoricalDomain, axisType) => {\n  if (axis == null || scale == null || axisRange == null || axisRange[0] === axisRange[1]) {\n    return undefined;\n  }\n  var isCategorical = isCategoricalAxis(layout, axisType);\n  var {\n    tickCount\n  } = axis;\n  var offset = 0;\n  offset = axisType === 'angleAxis' && (axisRange === null || axisRange === void 0 ? void 0 : axisRange.length) >= 2 ? mathSign(axisRange[0] - axisRange[1]) * 2 * offset : offset;\n\n  // When axis is a categorical axis, but the type of axis is number or the scale of axis is not \"auto\"\n  if (isCategorical && categoricalDomain) {\n    return categoricalDomain.map((entry, index) => ({\n      coordinate: scale(entry) + offset,\n      value: entry,\n      index,\n      offset\n    }));\n  }\n  if (scale.ticks) {\n    return scale.ticks(tickCount)\n    // @ts-expect-error why does the offset go here? The type does not require it\n    .map(entry => ({\n      coordinate: scale(entry) + offset,\n      value: entry,\n      offset\n    }));\n  }\n\n  // When axis has duplicated text, serial numbers are used to generate scale\n  return scale.domain().map((entry, index) => ({\n    coordinate: scale(entry) + offset,\n    value: duplicateDomain ? duplicateDomain[entry] : entry,\n    index,\n    offset\n  }));\n};\nexport var selectTicksOfGraphicalItem = createSelector([selectChartLayout, selectAxisSettings, selectAxisScale, selectAxisRange, selectDuplicateDomain, selectCategoricalDomain, pickAxisType], combineGraphicalItemTicks);\nexport var selectAxisWithScale = createSelector(selectBaseAxis, selectAxisScale, (axis, scale) => {\n  if (axis == null || scale == null) {\n    return undefined;\n  }\n  return _objectSpread(_objectSpread({}, axis), {}, {\n    scale\n  });\n});\nvar selectZAxisScale = createSelector([selectBaseAxis, selectRealScaleType, selectAxisDomain, selectAxisRangeWithReverse], combineScaleFunction);\nexport var selectZAxisWithScale = createSelector((state, _axisType, axisId) => selectZAxisSettings(state, axisId), selectZAxisScale, (axis, scale) => {\n  if (axis == null || scale == null) {\n    return undefined;\n  }\n  return _objectSpread(_objectSpread({}, axis), {}, {\n    scale\n  });\n});\n\n/**\n * We are also going to need to implement polar chart directions if we want to support keyboard controls for those.\n */\n\nexport var selectChartDirection = createSelector([selectChartLayout, selectAllXAxes, selectAllYAxes], (layout, allXAxes, allYAxes) => {\n  switch (layout) {\n    case 'horizontal':\n      {\n        return allXAxes.some(axis => axis.reversed) ? 'right-to-left' : 'left-to-right';\n      }\n    case 'vertical':\n      {\n        return allYAxes.some(axis => axis.reversed) ? 'bottom-to-top' : 'top-to-bottom';\n      }\n    // TODO: make this better. For now, right arrow triggers \"forward\", left arrow \"back\"\n    // however, the tooltip moves an unintuitive direction because of how the indices are rendered\n    case 'centric':\n    case 'radial':\n      {\n        return 'left-to-right';\n      }\n    default:\n      {\n        return undefined;\n      }\n  }\n});","map":{"version":3,"names":["ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","createSelector","range","d3Scales","selectChartLayout","checkDomainOfScale","getDomainOfStackGroups","getStackedData","getValueByDataKey","isCategoricalAxis","selectChartDataWithIndexes","selectChartDataWithIndexesIfNotInPanorama","isWellFormedNumberDomain","numericalDomainSpecifiedWithoutRequiringData","parseNumericalUserDomain","getPercentValue","hasDuplicate","isNan","isNumber","isNumOrStr","mathSign","upperFirst","isWellBehavedNumber","getNiceTickValues","getTickValuesFixedDomain","selectChartHeight","selectChartWidth","selectAllXAxes","selectAllYAxes","selectChartOffsetInternal","selectBrushDimensions","selectBrushSettings","selectBarCategoryGap","selectChartName","selectStackOffsetType","selectAngleAxis","selectAngleAxisRange","selectRadiusAxis","selectRadiusAxisRange","pickAxisType","pickAxisId","combineAxisRangeWithReverse","DEFAULT_Y_AXIS_WIDTH","getStackSeriesIdentifier","selectTooltipAxis","combineDisplayedStackedData","isStacked","defaultNumericDomain","implicitXAxis","allowDataOverflow","allowDecimals","allowDuplicatedCategory","angle","dataKey","undefined","domain","height","hide","id","includeHidden","interval","minTickGap","mirror","name","orientation","padding","left","right","reversed","scale","tick","tickCount","tickFormatter","ticks","type","unit","selectXAxisSettingsNoDefaults","state","axisId","cartesianAxis","xAxis","selectXAxisSettings","axis","implicitYAxis","top","bottom","width","selectYAxisSettingsNoDefaults","yAxis","selectYAxisSettings","implicitZAxis","selectZAxisSettings","zAxis","selectBaseAxis","axisType","Error","concat","selectCartesianAxisSettings","selectAxisSettings","selectHasBar","graphicalItems","cartesianItems","some","item","polarItems","itemAxisPredicate","xAxisId","yAxisId","zAxisId","angleAxisId","radiusAxisId","selectUnfilteredCartesianItems","selectAxisPredicate","combineGraphicalItemsSettings","axisSettings","axisPredicate","selectCartesianItemsSettings","selectStackedCartesianItemsSettings","filterGraphicalNotStackedItems","stackId","selectCartesianItemsSettingsExceptStacked","combineGraphicalItemsData","map","data","Boolean","flat","selectCartesianGraphicalItemsData","combineDisplayedData","graphicalItemsData","_ref","chartData","dataStartIndex","dataEndIndex","slice","selectDisplayedData","combineAppliedValues","items","flatMap","entry","selectAllAppliedValues","isErrorBarRelevantForAxisType","errorBar","direction","fromMainValueToError","isFinite","Array","isArray","minError","Math","min","maxError","max","onlyAllowNumbers","v","Date","n","getErrorDomainByDataKey","appliedValue","relevantErrorBars","eb","errorValue","lowBound","highBound","selectDisplayedStackedData","combineStackGroups","displayedData","stackOffsetType","initialItemsGroups","itemsGroup","reduce","acc","fromEntries","entries","_ref2","dataKeys","stackedData","selectStackGroups","combineDomainOfStackGroups","stackGroups","_ref3","domainOfStackGroups","selectDomainOfStackGroups","combineAppliedNumericalValuesIncludingErrorValues","errorBars","_errorBars$item$id","_axisSettings$dataKey","valueByDataKey","errorDomain","selectAllErrorBarSettings","combineRelevantErrorBarSettings","cartesianItemsSettings","allErrorBarSettings","selectErrorBarsSettingsExceptStacked","selectAllAppliedNumericalValuesIncludingErrorValues","onlyAllowNumbersAndStringsAndDates","computeNumericalDomain","dataWithErrorDomains","allDataSquished","d","onlyNumbers","computeDomainOfTypeCategory","isCategorical","categoricalDomain","from","Set","getDomainDefinition","_axisSettings$domain","allValues","mergeDomains","_len","domains","_key","allDomains","selectReferenceDots","referenceElements","dots","filterReferenceElements","elements","el","ifOverflow","selectReferenceDotsByAxis","selectReferenceAreas","areas","selectReferenceAreasByAxis","selectReferenceLines","lines","selectReferenceLinesByAxis","combineDotsDomain","allCoords","dot","x","y","selectReferenceDotsDomain","combineAreasDomain","area","x1","y1","x2","y2","selectReferenceAreasDomain","combineLinesDomain","line","selectReferenceLinesDomain","selectReferenceElementsDomain","dotsDomain","linesDomain","areasDomain","selectDomainDefinition","combineNumericalDomain","domainDefinition","allDataWithErrorDomains","referenceElementsDomain","layout","domainFromUserPreference","shouldIncludeDomainOfStackGroups","mergedDomains","selectNumericalDomain","expandDomain","combineAxisDomain","allAppliedValues","numericalDomain","selectAxisDomain","combineRealScaleType","axisConfig","hasBar","chartType","indexOf","selectRealScaleType","getD3ScaleFromType","realScaleType","combineScaleFunction","axisDomain","axisRange","copy","d3ScaleFunction","combineNiceTicks","selectNiceTicks","combineAxisDomainWithNiceTicks","niceTicks","minFromDomain","minFromTicks","maxFromDomain","maxFromTicks","selectAxisDomainIncludingNiceTicks","selectSmallestDistanceBetweenValues","smallestDistanceBetweenValues","Infinity","sortedValues","sort","a","b","diff","distance","selectCalculatedPadding","_1","_2","_3","smallestDistanceInPercent","barCategoryGap","offset","rangeWidth","gap","halfBand","selectCalculatedXAxisPadding","xAxisSettings","selectCalculatedYAxisPadding","yAxisSettings","selectXAxisPadding","calculated","_padding$left","_padding$right","selectYAxisPadding","_padding$top","_padding$bottom","combineXAxisRange","_state","_axisId","isPanorama","brushDimensions","_ref4","brushPadding","combineYAxisRange","_ref5","selectAxisRange","_selectZAxisSettings","selectAxisRangeWithReverse","selectAxisScale","selectErrorBarsSettings","compareIds","pickAxisOrientation","pickMirror","_orientation","selectAllXAxesWithOffsetType","allAxes","selectAllYAxesWithOffsetType","getXAxisSize","getYAxisSize","selectXAxisSize","combineXAxisPositionStartingPoint","chartHeight","combineYAxisPositionStartingPoint","chartWidth","selectAllXAxesOffsetSteps","allAxesWithSameOffsetType","steps","position","axisSize","needSpace","selectAllYAxesOffsetSteps","selectXAxisOffsetSteps","selectXAxisPosition","_","allSteps","stepOfThisAxis","selectYAxisOffsetSteps","selectYAxisPosition","selectYAxisSize","selectCartesianAxisSize","combineDuplicateDomain","chartLayout","appliedValues","allData","av","selectDuplicateDomain","combineCategoricalDomain","selectCategoricalDomain","selectAxisPropsNeededForCartesianGridTicksGenerator","duplicateDomain","combineAxisTicks","offsetForBand","bandwidth","ticksOrNiceTicks","result","index","scaleContent","coordinate","row","selectTicksOfAxis","combineGraphicalItemTicks","selectTicksOfGraphicalItem","selectAxisWithScale","selectZAxisScale","selectZAxisWithScale","_axisType","selectChartDirection","allXAxes","allYAxes"],"sources":["C:/yo/personal/Proyectos/CognIA Hackaton UNAB 2025/node_modules/recharts/es6/state/selectors/axisSelectors.js"],"sourcesContent":["function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { createSelector } from 'reselect';\nimport range from 'es-toolkit/compat/range';\nimport * as d3Scales from 'victory-vendor/d3-scale';\nimport { selectChartLayout } from '../../context/chartLayoutContext';\nimport { checkDomainOfScale, getDomainOfStackGroups, getStackedData, getValueByDataKey, isCategoricalAxis } from '../../util/ChartUtils';\nimport { selectChartDataWithIndexes, selectChartDataWithIndexesIfNotInPanorama } from './dataSelectors';\nimport { isWellFormedNumberDomain, numericalDomainSpecifiedWithoutRequiringData, parseNumericalUserDomain } from '../../util/isDomainSpecifiedByUser';\nimport { getPercentValue, hasDuplicate, isNan, isNumber, isNumOrStr, mathSign, upperFirst } from '../../util/DataUtils';\nimport { isWellBehavedNumber } from '../../util/isWellBehavedNumber';\nimport { getNiceTickValues, getTickValuesFixedDomain } from '../../util/scale';\nimport { selectChartHeight, selectChartWidth } from './containerSelectors';\nimport { selectAllXAxes, selectAllYAxes } from './selectAllAxes';\nimport { selectChartOffsetInternal } from './selectChartOffsetInternal';\nimport { selectBrushDimensions, selectBrushSettings } from './brushSelectors';\nimport { selectBarCategoryGap, selectChartName, selectStackOffsetType } from './rootPropsSelectors';\nimport { selectAngleAxis, selectAngleAxisRange, selectRadiusAxis, selectRadiusAxisRange } from './polarAxisSelectors';\nimport { pickAxisType } from './pickAxisType';\nimport { pickAxisId } from './pickAxisId';\nimport { combineAxisRangeWithReverse } from './combiners/combineAxisRangeWithReverse';\nimport { DEFAULT_Y_AXIS_WIDTH } from '../../util/Constants';\nimport { getStackSeriesIdentifier } from '../../util/stacks/getStackSeriesIdentifier';\nimport { selectTooltipAxis } from './selectTooltipAxis';\nimport { combineDisplayedStackedData } from './combiners/combineDisplayedStackedData';\nimport { isStacked } from '../types/StackedGraphicalItem';\nvar defaultNumericDomain = [0, 'auto'];\n\n/**\n * angle, radius, X, Y, and Z axes all have domain and range and scale and associated settings\n */\n\n/**\n * X and Y axes have ticks. Z axis is never displayed and so it lacks ticks\n * and tick settings.\n */\n\n/**\n * If an axis is not explicitly defined as an element,\n * we still need to render something in the chart and we need\n * some object to hold the domain and default settings.\n */\nexport var implicitXAxis = {\n  allowDataOverflow: false,\n  allowDecimals: true,\n  allowDuplicatedCategory: true,\n  angle: 0,\n  dataKey: undefined,\n  domain: undefined,\n  height: 30,\n  hide: true,\n  id: 0,\n  includeHidden: false,\n  interval: 'preserveEnd',\n  minTickGap: 5,\n  mirror: false,\n  name: undefined,\n  orientation: 'bottom',\n  padding: {\n    left: 0,\n    right: 0\n  },\n  reversed: false,\n  scale: 'auto',\n  tick: true,\n  tickCount: 5,\n  tickFormatter: undefined,\n  ticks: undefined,\n  type: 'category',\n  unit: undefined\n};\nexport var selectXAxisSettingsNoDefaults = (state, axisId) => {\n  return state.cartesianAxis.xAxis[axisId];\n};\nexport var selectXAxisSettings = (state, axisId) => {\n  var axis = selectXAxisSettingsNoDefaults(state, axisId);\n  if (axis == null) {\n    return implicitXAxis;\n  }\n  return axis;\n};\n\n/**\n * If an axis is not explicitly defined as an element,\n * we still need to render something in the chart and we need\n * some object to hold the domain and default settings.\n */\nexport var implicitYAxis = {\n  allowDataOverflow: false,\n  allowDecimals: true,\n  allowDuplicatedCategory: true,\n  angle: 0,\n  dataKey: undefined,\n  domain: defaultNumericDomain,\n  hide: true,\n  id: 0,\n  includeHidden: false,\n  interval: 'preserveEnd',\n  minTickGap: 5,\n  mirror: false,\n  name: undefined,\n  orientation: 'left',\n  padding: {\n    top: 0,\n    bottom: 0\n  },\n  reversed: false,\n  scale: 'auto',\n  tick: true,\n  tickCount: 5,\n  tickFormatter: undefined,\n  ticks: undefined,\n  type: 'number',\n  unit: undefined,\n  width: DEFAULT_Y_AXIS_WIDTH\n};\nexport var selectYAxisSettingsNoDefaults = (state, axisId) => {\n  return state.cartesianAxis.yAxis[axisId];\n};\nexport var selectYAxisSettings = (state, axisId) => {\n  var axis = selectYAxisSettingsNoDefaults(state, axisId);\n  if (axis == null) {\n    return implicitYAxis;\n  }\n  return axis;\n};\nexport var implicitZAxis = {\n  domain: [0, 'auto'],\n  includeHidden: false,\n  reversed: false,\n  allowDataOverflow: false,\n  allowDuplicatedCategory: false,\n  dataKey: undefined,\n  id: 0,\n  name: '',\n  range: [64, 64],\n  scale: 'auto',\n  type: 'number',\n  unit: ''\n};\nexport var selectZAxisSettings = (state, axisId) => {\n  var axis = state.cartesianAxis.zAxis[axisId];\n  if (axis == null) {\n    return implicitZAxis;\n  }\n  return axis;\n};\nexport var selectBaseAxis = (state, axisType, axisId) => {\n  switch (axisType) {\n    case 'xAxis':\n      {\n        return selectXAxisSettings(state, axisId);\n      }\n    case 'yAxis':\n      {\n        return selectYAxisSettings(state, axisId);\n      }\n    case 'zAxis':\n      {\n        return selectZAxisSettings(state, axisId);\n      }\n    case 'angleAxis':\n      {\n        return selectAngleAxis(state, axisId);\n      }\n    case 'radiusAxis':\n      {\n        return selectRadiusAxis(state, axisId);\n      }\n    default:\n      throw new Error(\"Unexpected axis type: \".concat(axisType));\n  }\n};\nvar selectCartesianAxisSettings = (state, axisType, axisId) => {\n  switch (axisType) {\n    case 'xAxis':\n      {\n        return selectXAxisSettings(state, axisId);\n      }\n    case 'yAxis':\n      {\n        return selectYAxisSettings(state, axisId);\n      }\n    default:\n      throw new Error(\"Unexpected axis type: \".concat(axisType));\n  }\n};\n\n/**\n * Selects either an X or Y axis. Doesn't work with Z axis - for that, instead use selectBaseAxis.\n * @param state Root state\n * @param axisType xAxis | yAxis\n * @param axisId xAxisId | yAxisId\n * @returns axis settings object\n */\nexport var selectAxisSettings = (state, axisType, axisId) => {\n  switch (axisType) {\n    case 'xAxis':\n      {\n        return selectXAxisSettings(state, axisId);\n      }\n    case 'yAxis':\n      {\n        return selectYAxisSettings(state, axisId);\n      }\n    case 'angleAxis':\n      {\n        return selectAngleAxis(state, axisId);\n      }\n    case 'radiusAxis':\n      {\n        return selectRadiusAxis(state, axisId);\n      }\n    default:\n      throw new Error(\"Unexpected axis type: \".concat(axisType));\n  }\n};\n\n/**\n * @param state RechartsRootState\n * @return boolean true if there is at least one Bar or RadialBar\n */\nexport var selectHasBar = state => state.graphicalItems.cartesianItems.some(item => item.type === 'bar') || state.graphicalItems.polarItems.some(item => item.type === 'radialBar');\n\n/**\n * Filters CartesianGraphicalItemSettings by the relevant axis ID\n * @param axisType 'xAxis' | 'yAxis' | 'zAxis' | 'radiusAxis' | 'angleAxis'\n * @param axisId from props, defaults to 0\n *\n * @returns Predicate function that return true for CartesianGraphicalItemSettings that are relevant to the specified axis\n */\nexport function itemAxisPredicate(axisType, axisId) {\n  return item => {\n    switch (axisType) {\n      case 'xAxis':\n        // This is sensitive to the data type, as 0 !== '0'. I wonder if we should be more flexible. How does 2.x branch behave? TODO write test for that\n        return 'xAxisId' in item && item.xAxisId === axisId;\n      case 'yAxis':\n        return 'yAxisId' in item && item.yAxisId === axisId;\n      case 'zAxis':\n        return 'zAxisId' in item && item.zAxisId === axisId;\n      case 'angleAxis':\n        return 'angleAxisId' in item && item.angleAxisId === axisId;\n      case 'radiusAxis':\n        return 'radiusAxisId' in item && item.radiusAxisId === axisId;\n      default:\n        return false;\n    }\n  };\n}\nexport var selectUnfilteredCartesianItems = state => state.graphicalItems.cartesianItems;\nvar selectAxisPredicate = createSelector([pickAxisType, pickAxisId], itemAxisPredicate);\nexport var combineGraphicalItemsSettings = (graphicalItems, axisSettings, axisPredicate) => graphicalItems.filter(axisPredicate).filter(item => {\n  if ((axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.includeHidden) === true) {\n    return true;\n  }\n  return !item.hide;\n});\nexport var selectCartesianItemsSettings = createSelector([selectUnfilteredCartesianItems, selectBaseAxis, selectAxisPredicate], combineGraphicalItemsSettings);\nexport var selectStackedCartesianItemsSettings = createSelector([selectCartesianItemsSettings], cartesianItems => {\n  return cartesianItems.filter(item => item.type === 'area' || item.type === 'bar').filter(isStacked);\n});\nexport var filterGraphicalNotStackedItems = cartesianItems => cartesianItems.filter(item => !('stackId' in item) || item.stackId === undefined);\nvar selectCartesianItemsSettingsExceptStacked = createSelector([selectCartesianItemsSettings], filterGraphicalNotStackedItems);\nexport var combineGraphicalItemsData = cartesianItems => cartesianItems.map(item => item.data).filter(Boolean).flat(1);\n\n/**\n * This is a \"cheap\" selector - it returns the data but doesn't iterate them, so it is not sensitive on the array length.\n * Also does not apply dataKey yet.\n * @param state RechartsRootState\n * @returns data defined on the chart graphical items, such as Line or Scatter or Pie, and filtered with appropriate dataKey\n */\nexport var selectCartesianGraphicalItemsData = createSelector([selectCartesianItemsSettings], combineGraphicalItemsData);\nexport var combineDisplayedData = (graphicalItemsData, _ref) => {\n  var {\n    chartData = [],\n    dataStartIndex,\n    dataEndIndex\n  } = _ref;\n  if (graphicalItemsData.length > 0) {\n    /*\n     * There is no slicing when data is defined on graphical items. Why?\n     * Because Brush ignores data defined on graphical items,\n     * and does not render.\n     * So Brush will never show up in a Scatter chart for example.\n     * This is something we will need to fix.\n     *\n     * Now, when the root chart data is not defined, the dataEndIndex is 0,\n     * which means the itemsData will be sliced to an empty array anyway.\n     * But that's an implementation detail, and we can fix that too.\n     *\n     * Also, in absence of Axis dataKey, we use the dataKey from each item, respectively.\n     * This is the usual pattern for numerical axis, that is the one where bars go up:\n     * users don't specify any dataKey by default and expect the axis to \"just match the data\".\n     */\n    return graphicalItemsData;\n  }\n  return chartData.slice(dataStartIndex, dataEndIndex + 1);\n};\n\n/**\n * This selector will return all data there is in the chart: graphical items, chart root, all together.\n * Useful for figuring out an axis domain (because that needs to know of everything),\n * not useful for rendering individual graphical elements (because they need to know which data is theirs and which is not).\n *\n * This function will discard the original indexes, so it is also not useful for anything that depends on ordering.\n */\nexport var selectDisplayedData = createSelector([selectCartesianGraphicalItemsData, selectChartDataWithIndexesIfNotInPanorama], combineDisplayedData);\nexport var combineAppliedValues = (data, axisSettings, items) => {\n  if ((axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.dataKey) != null) {\n    return data.map(item => ({\n      value: getValueByDataKey(item, axisSettings.dataKey)\n    }));\n  }\n  if (items.length > 0) {\n    return items.map(item => item.dataKey).flatMap(dataKey => data.map(entry => ({\n      value: getValueByDataKey(entry, dataKey)\n    })));\n  }\n  return data.map(entry => ({\n    value: entry\n  }));\n};\n\n/**\n * This selector will return all values with the appropriate dataKey applied on them.\n * Which dataKey is appropriate depends on where it is defined.\n *\n * This is an expensive selector - it will iterate all data and compute their value using the provided dataKey.\n */\nexport var selectAllAppliedValues = createSelector([selectDisplayedData, selectBaseAxis, selectCartesianItemsSettings], combineAppliedValues);\nexport function isErrorBarRelevantForAxisType(axisType, errorBar) {\n  switch (axisType) {\n    case 'xAxis':\n      return errorBar.direction === 'x';\n    case 'yAxis':\n      return errorBar.direction === 'y';\n    default:\n      return false;\n  }\n}\n\n/**\n * This is type of \"error\" in chart. It is set by using ErrorBar, and it can represent confidence interval,\n * or gap in the data, or standard deviation, or quartiles in boxplot, or whiskers or whatever.\n *\n * We will internally represent it as a tuple of two numbers, where the first number is the lower bound and the second number is the upper bound.\n *\n * It is also true that the first number should be lower than or equal to the associated \"main value\",\n * and the second number should be higher than or equal to the associated \"main value\".\n */\n\nexport function fromMainValueToError(value) {\n  if (isNumber(value) && Number.isFinite(value)) {\n    return [value, value];\n  }\n  if (Array.isArray(value)) {\n    var minError = Math.min(...value);\n    var maxError = Math.max(...value);\n    if (!isNan(minError) && !isNan(maxError) && Number.isFinite(minError) && Number.isFinite(maxError)) {\n      return [minError, maxError];\n    }\n  }\n  return undefined;\n}\nfunction onlyAllowNumbers(data) {\n  return data.filter(v => isNumOrStr(v) || v instanceof Date).map(Number).filter(n => isNan(n) === false);\n}\n\n/**\n * @param entry One item in the 'data' array. Could be anything really - this is defined externally. This is the raw, before dataKey application\n * @param appliedValue This is the result of applying the 'main' dataKey on the `entry`.\n * @param relevantErrorBars Error bars that are relevant for the current axis and layout and all that.\n * @return either undefined or an array of ErrorValue\n */\nexport function getErrorDomainByDataKey(entry, appliedValue, relevantErrorBars) {\n  if (!relevantErrorBars || typeof appliedValue !== 'number' || isNan(appliedValue)) {\n    return [];\n  }\n  if (!relevantErrorBars.length) {\n    return [];\n  }\n  return onlyAllowNumbers(relevantErrorBars.flatMap(eb => {\n    var errorValue = getValueByDataKey(entry, eb.dataKey);\n    var lowBound, highBound;\n    if (Array.isArray(errorValue)) {\n      [lowBound, highBound] = errorValue;\n    } else {\n      lowBound = highBound = errorValue;\n    }\n    if (!isWellBehavedNumber(lowBound) || !isWellBehavedNumber(highBound)) {\n      return undefined;\n    }\n    return [appliedValue - lowBound, appliedValue + highBound];\n  }));\n}\nexport var selectDisplayedStackedData = createSelector([selectStackedCartesianItemsSettings, selectChartDataWithIndexesIfNotInPanorama, selectTooltipAxis], combineDisplayedStackedData);\nexport var combineStackGroups = (displayedData, items, stackOffsetType) => {\n  var initialItemsGroups = {};\n  var itemsGroup = items.reduce((acc, item) => {\n    if (item.stackId == null) {\n      return acc;\n    }\n    if (acc[item.stackId] == null) {\n      acc[item.stackId] = [];\n    }\n    acc[item.stackId].push(item);\n    return acc;\n  }, initialItemsGroups);\n  return Object.fromEntries(Object.entries(itemsGroup).map(_ref2 => {\n    var [stackId, graphicalItems] = _ref2;\n    var dataKeys = graphicalItems.map(getStackSeriesIdentifier);\n    return [stackId, {\n      // @ts-expect-error getStackedData requires that the input is array of objects, Recharts does not test for that\n      stackedData: getStackedData(displayedData, dataKeys, stackOffsetType),\n      graphicalItems\n    }];\n  }));\n};\n\n/**\n * Stack groups are groups of graphical items that stack on each other.\n * Stack is a function of axis type (X, Y), axis ID, and stack ID.\n * Graphical items that do not have a stack ID are not going to be present in stack groups.\n */\nexport var selectStackGroups = createSelector([selectDisplayedStackedData, selectStackedCartesianItemsSettings, selectStackOffsetType], combineStackGroups);\nexport var combineDomainOfStackGroups = (stackGroups, _ref3, axisType) => {\n  var {\n    dataStartIndex,\n    dataEndIndex\n  } = _ref3;\n  if (axisType === 'zAxis') {\n    // ZAxis ignores stacks\n    return undefined;\n  }\n  var domainOfStackGroups = getDomainOfStackGroups(stackGroups, dataStartIndex, dataEndIndex);\n  if (domainOfStackGroups != null && domainOfStackGroups[0] === 0 && domainOfStackGroups[1] === 0) {\n    return undefined;\n  }\n  return domainOfStackGroups;\n};\nexport var selectDomainOfStackGroups = createSelector([selectStackGroups, selectChartDataWithIndexes, pickAxisType], combineDomainOfStackGroups);\nexport var combineAppliedNumericalValuesIncludingErrorValues = (data, axisSettings, items, errorBars, axisType) => {\n  if (items.length > 0) {\n    return data.flatMap(entry => {\n      return items.flatMap(item => {\n        var _errorBars$item$id, _axisSettings$dataKey;\n        var relevantErrorBars = (_errorBars$item$id = errorBars[item.id]) === null || _errorBars$item$id === void 0 ? void 0 : _errorBars$item$id.filter(errorBar => isErrorBarRelevantForAxisType(axisType, errorBar));\n        var valueByDataKey = getValueByDataKey(entry, (_axisSettings$dataKey = axisSettings.dataKey) !== null && _axisSettings$dataKey !== void 0 ? _axisSettings$dataKey : item.dataKey);\n        return {\n          value: valueByDataKey,\n          errorDomain: getErrorDomainByDataKey(entry, valueByDataKey, relevantErrorBars)\n        };\n      });\n    }).filter(Boolean);\n  }\n  if ((axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.dataKey) != null) {\n    return data.map(item => ({\n      value: getValueByDataKey(item, axisSettings.dataKey),\n      errorDomain: []\n    }));\n  }\n  return data.map(entry => ({\n    value: entry,\n    errorDomain: []\n  }));\n};\nexport var selectAllErrorBarSettings = state => state.errorBars;\nvar combineRelevantErrorBarSettings = (cartesianItemsSettings, allErrorBarSettings, axisType) => {\n  return cartesianItemsSettings.flatMap(item => {\n    return allErrorBarSettings[item.id];\n  }).filter(Boolean).filter(e => {\n    return isErrorBarRelevantForAxisType(axisType, e);\n  });\n};\nexport var selectErrorBarsSettingsExceptStacked = createSelector([selectCartesianItemsSettingsExceptStacked, selectAllErrorBarSettings, pickAxisType], combineRelevantErrorBarSettings);\nexport var selectAllAppliedNumericalValuesIncludingErrorValues = createSelector([selectDisplayedData, selectBaseAxis, selectCartesianItemsSettingsExceptStacked, selectAllErrorBarSettings, pickAxisType], combineAppliedNumericalValuesIncludingErrorValues);\nfunction onlyAllowNumbersAndStringsAndDates(item) {\n  var {\n    value\n  } = item;\n  if (isNumOrStr(value) || value instanceof Date) {\n    return value;\n  }\n  return undefined;\n}\nvar computeNumericalDomain = dataWithErrorDomains => {\n  var allDataSquished = dataWithErrorDomains\n  // This flatMap has to be flat because we're creating a new array in the return value\n  .flatMap(d => [d.value, d.errorDomain])\n  // This flat is needed because a) errorDomain is an array, and b) value may be a number, or it may be a range (for Area, for example)\n  .flat(1);\n  var onlyNumbers = onlyAllowNumbers(allDataSquished);\n  if (onlyNumbers.length === 0) {\n    return undefined;\n  }\n  return [Math.min(...onlyNumbers), Math.max(...onlyNumbers)];\n};\nvar computeDomainOfTypeCategory = (allDataSquished, axisSettings, isCategorical) => {\n  var categoricalDomain = allDataSquished.map(onlyAllowNumbersAndStringsAndDates).filter(v => v != null);\n  if (isCategorical && (axisSettings.dataKey == null || axisSettings.allowDuplicatedCategory && hasDuplicate(categoricalDomain))) {\n    /*\n     * 1. In an absence of dataKey, Recharts will use array indexes as its categorical domain\n     * 2. When category axis has duplicated text, serial numbers are used to generate scale\n     */\n    return range(0, allDataSquished.length);\n  }\n  if (axisSettings.allowDuplicatedCategory) {\n    return categoricalDomain;\n  }\n  return Array.from(new Set(categoricalDomain));\n};\nexport var getDomainDefinition = axisSettings => {\n  var _axisSettings$domain;\n  if (axisSettings == null || !('domain' in axisSettings)) {\n    return defaultNumericDomain;\n  }\n  if (axisSettings.domain != null) {\n    return axisSettings.domain;\n  }\n  if (axisSettings.ticks != null) {\n    if (axisSettings.type === 'number') {\n      var allValues = onlyAllowNumbers(axisSettings.ticks);\n      return [Math.min(...allValues), Math.max(...allValues)];\n    }\n    if (axisSettings.type === 'category') {\n      return axisSettings.ticks.map(String);\n    }\n  }\n  return (_axisSettings$domain = axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.domain) !== null && _axisSettings$domain !== void 0 ? _axisSettings$domain : defaultNumericDomain;\n};\nexport var mergeDomains = function mergeDomains() {\n  for (var _len = arguments.length, domains = new Array(_len), _key = 0; _key < _len; _key++) {\n    domains[_key] = arguments[_key];\n  }\n  var allDomains = domains.filter(Boolean);\n  if (allDomains.length === 0) {\n    return undefined;\n  }\n  var allValues = allDomains.flat();\n  var min = Math.min(...allValues);\n  var max = Math.max(...allValues);\n  return [min, max];\n};\nexport var selectReferenceDots = state => state.referenceElements.dots;\nexport var filterReferenceElements = (elements, axisType, axisId) => {\n  return elements.filter(el => el.ifOverflow === 'extendDomain').filter(el => {\n    if (axisType === 'xAxis') {\n      return el.xAxisId === axisId;\n    }\n    return el.yAxisId === axisId;\n  });\n};\nexport var selectReferenceDotsByAxis = createSelector([selectReferenceDots, pickAxisType, pickAxisId], filterReferenceElements);\nexport var selectReferenceAreas = state => state.referenceElements.areas;\nexport var selectReferenceAreasByAxis = createSelector([selectReferenceAreas, pickAxisType, pickAxisId], filterReferenceElements);\nexport var selectReferenceLines = state => state.referenceElements.lines;\nexport var selectReferenceLinesByAxis = createSelector([selectReferenceLines, pickAxisType, pickAxisId], filterReferenceElements);\nexport var combineDotsDomain = (dots, axisType) => {\n  var allCoords = onlyAllowNumbers(dots.map(dot => axisType === 'xAxis' ? dot.x : dot.y));\n  if (allCoords.length === 0) {\n    return undefined;\n  }\n  return [Math.min(...allCoords), Math.max(...allCoords)];\n};\nvar selectReferenceDotsDomain = createSelector(selectReferenceDotsByAxis, pickAxisType, combineDotsDomain);\nexport var combineAreasDomain = (areas, axisType) => {\n  var allCoords = onlyAllowNumbers(areas.flatMap(area => [axisType === 'xAxis' ? area.x1 : area.y1, axisType === 'xAxis' ? area.x2 : area.y2]));\n  if (allCoords.length === 0) {\n    return undefined;\n  }\n  return [Math.min(...allCoords), Math.max(...allCoords)];\n};\nvar selectReferenceAreasDomain = createSelector([selectReferenceAreasByAxis, pickAxisType], combineAreasDomain);\nexport var combineLinesDomain = (lines, axisType) => {\n  var allCoords = onlyAllowNumbers(lines.map(line => axisType === 'xAxis' ? line.x : line.y));\n  if (allCoords.length === 0) {\n    return undefined;\n  }\n  return [Math.min(...allCoords), Math.max(...allCoords)];\n};\nvar selectReferenceLinesDomain = createSelector(selectReferenceLinesByAxis, pickAxisType, combineLinesDomain);\nvar selectReferenceElementsDomain = createSelector(selectReferenceDotsDomain, selectReferenceLinesDomain, selectReferenceAreasDomain, (dotsDomain, linesDomain, areasDomain) => {\n  return mergeDomains(dotsDomain, areasDomain, linesDomain);\n});\nexport var selectDomainDefinition = createSelector([selectBaseAxis], getDomainDefinition);\nexport var combineNumericalDomain = (axisSettings, domainDefinition, domainOfStackGroups, allDataWithErrorDomains, referenceElementsDomain, layout, axisType) => {\n  var domainFromUserPreference = numericalDomainSpecifiedWithoutRequiringData(domainDefinition, axisSettings.allowDataOverflow);\n  if (domainFromUserPreference != null) {\n    // We're done! No need to compute anything else.\n    return domainFromUserPreference;\n  }\n  var shouldIncludeDomainOfStackGroups = layout === 'vertical' && axisType === 'xAxis' || layout === 'horizontal' && axisType === 'yAxis';\n  var mergedDomains = shouldIncludeDomainOfStackGroups ? mergeDomains(domainOfStackGroups, referenceElementsDomain, computeNumericalDomain(allDataWithErrorDomains)) : mergeDomains(referenceElementsDomain, computeNumericalDomain(allDataWithErrorDomains));\n  return parseNumericalUserDomain(domainDefinition, mergedDomains, axisSettings.allowDataOverflow);\n};\nexport var selectNumericalDomain = createSelector([selectBaseAxis, selectDomainDefinition, selectDomainOfStackGroups, selectAllAppliedNumericalValuesIncludingErrorValues, selectReferenceElementsDomain, selectChartLayout, pickAxisType], combineNumericalDomain);\n\n/**\n * Expand by design maps everything between 0 and 1,\n * there is nothing to compute.\n * See https://d3js.org/d3-shape/stack#stack-offsets\n */\nvar expandDomain = [0, 1];\nexport var combineAxisDomain = (axisSettings, layout, displayedData, allAppliedValues, stackOffsetType, axisType, numericalDomain) => {\n  if ((axisSettings == null || displayedData == null || displayedData.length === 0) && numericalDomain === undefined) {\n    return undefined;\n  }\n  var {\n    dataKey,\n    type\n  } = axisSettings;\n  var isCategorical = isCategoricalAxis(layout, axisType);\n  if (isCategorical && dataKey == null) {\n    return range(0, displayedData.length);\n  }\n  if (type === 'category') {\n    return computeDomainOfTypeCategory(allAppliedValues, axisSettings, isCategorical);\n  }\n  if (stackOffsetType === 'expand') {\n    return expandDomain;\n  }\n  return numericalDomain;\n};\nexport var selectAxisDomain = createSelector([selectBaseAxis, selectChartLayout, selectDisplayedData, selectAllAppliedValues, selectStackOffsetType, pickAxisType, selectNumericalDomain], combineAxisDomain);\nexport var combineRealScaleType = (axisConfig, layout, hasBar, chartType, axisType) => {\n  if (axisConfig == null) {\n    return undefined;\n  }\n  var {\n    scale,\n    type\n  } = axisConfig;\n  if (scale === 'auto') {\n    if (layout === 'radial' && axisType === 'radiusAxis') {\n      return 'band';\n    }\n    if (layout === 'radial' && axisType === 'angleAxis') {\n      return 'linear';\n    }\n    if (type === 'category' && chartType && (chartType.indexOf('LineChart') >= 0 || chartType.indexOf('AreaChart') >= 0 || chartType.indexOf('ComposedChart') >= 0 && !hasBar)) {\n      return 'point';\n    }\n    if (type === 'category') {\n      return 'band';\n    }\n    return 'linear';\n  }\n  if (typeof scale === 'string') {\n    var name = \"scale\".concat(upperFirst(scale));\n    return name in d3Scales ? name : 'point';\n  }\n  return undefined;\n};\nexport var selectRealScaleType = createSelector([selectBaseAxis, selectChartLayout, selectHasBar, selectChartName, pickAxisType], combineRealScaleType);\nfunction getD3ScaleFromType(realScaleType) {\n  if (realScaleType == null) {\n    return undefined;\n  }\n  if (realScaleType in d3Scales) {\n    // @ts-expect-error we should do better type verification here\n    return d3Scales[realScaleType]();\n  }\n  var name = \"scale\".concat(upperFirst(realScaleType));\n  if (name in d3Scales) {\n    // @ts-expect-error we should do better type verification here\n    return d3Scales[name]();\n  }\n  return undefined;\n}\nexport function combineScaleFunction(axis, realScaleType, axisDomain, axisRange) {\n  if (axisDomain == null || axisRange == null) {\n    return undefined;\n  }\n  if (typeof axis.scale === 'function') {\n    // @ts-expect-error we're going to assume here that if axis.scale is a function then it is a d3Scale function\n    return axis.scale.copy().domain(axisDomain).range(axisRange);\n  }\n  var d3ScaleFunction = getD3ScaleFromType(realScaleType);\n  if (d3ScaleFunction == null) {\n    return undefined;\n  }\n  var scale = d3ScaleFunction.domain(axisDomain).range(axisRange);\n  // I don't like this function because it mutates the scale. We should come up with a way to compute the domain up front.\n  checkDomainOfScale(scale);\n  return scale;\n}\nexport var combineNiceTicks = (axisDomain, axisSettings, realScaleType) => {\n  var domainDefinition = getDomainDefinition(axisSettings);\n  if (realScaleType !== 'auto' && realScaleType !== 'linear') {\n    return undefined;\n  }\n  if (axisSettings != null && axisSettings.tickCount && Array.isArray(domainDefinition) && (domainDefinition[0] === 'auto' || domainDefinition[1] === 'auto') && isWellFormedNumberDomain(axisDomain)) {\n    return getNiceTickValues(axisDomain, axisSettings.tickCount, axisSettings.allowDecimals);\n  }\n  if (axisSettings != null && axisSettings.tickCount && axisSettings.type === 'number' && isWellFormedNumberDomain(axisDomain)) {\n    return getTickValuesFixedDomain(axisDomain, axisSettings.tickCount, axisSettings.allowDecimals);\n  }\n  return undefined;\n};\nexport var selectNiceTicks = createSelector([selectAxisDomain, selectAxisSettings, selectRealScaleType], combineNiceTicks);\nexport var combineAxisDomainWithNiceTicks = (axisSettings, domain, niceTicks, axisType) => {\n  if (\n  /*\n   * Angle axis for some reason uses nice ticks when rendering axis tick labels,\n   * but doesn't use nice ticks for extending domain like all the other axes do.\n   * Not really sure why? Is there a good reason,\n   * or is it just because someone added support for nice ticks to the other axes and forgot this one?\n   */\n  axisType !== 'angleAxis' && (axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.type) === 'number' && isWellFormedNumberDomain(domain) && Array.isArray(niceTicks) && niceTicks.length > 0) {\n    var minFromDomain = domain[0];\n    var minFromTicks = niceTicks[0];\n    var maxFromDomain = domain[1];\n    var maxFromTicks = niceTicks[niceTicks.length - 1];\n    return [Math.min(minFromDomain, minFromTicks), Math.max(maxFromDomain, maxFromTicks)];\n  }\n  return domain;\n};\nexport var selectAxisDomainIncludingNiceTicks = createSelector([selectBaseAxis, selectAxisDomain, selectNiceTicks, pickAxisType], combineAxisDomainWithNiceTicks);\n\n/**\n * Returns the smallest gap, between two numbers in the data, as a ratio of the whole range (max - min).\n * Ignores domain provided by user and only considers domain from data.\n *\n * The result is a number between 0 and 1.\n */\nexport var selectSmallestDistanceBetweenValues = createSelector(selectAllAppliedValues, selectBaseAxis, (allDataSquished, axisSettings) => {\n  if (!axisSettings || axisSettings.type !== 'number') {\n    return undefined;\n  }\n  var smallestDistanceBetweenValues = Infinity;\n  var sortedValues = Array.from(onlyAllowNumbers(allDataSquished.map(d => d.value))).sort((a, b) => a - b);\n  if (sortedValues.length < 2) {\n    return Infinity;\n  }\n  var diff = sortedValues[sortedValues.length - 1] - sortedValues[0];\n  if (diff === 0) {\n    return Infinity;\n  }\n  // Only do n - 1 distance calculations because there's only n - 1 distances between n values.\n  for (var i = 0; i < sortedValues.length - 1; i++) {\n    var distance = sortedValues[i + 1] - sortedValues[i];\n    smallestDistanceBetweenValues = Math.min(smallestDistanceBetweenValues, distance);\n  }\n  return smallestDistanceBetweenValues / diff;\n});\nvar selectCalculatedPadding = createSelector(selectSmallestDistanceBetweenValues, selectChartLayout, selectBarCategoryGap, selectChartOffsetInternal, (_1, _2, _3, padding) => padding, (smallestDistanceInPercent, layout, barCategoryGap, offset, padding) => {\n  if (!isWellBehavedNumber(smallestDistanceInPercent)) {\n    return 0;\n  }\n  var rangeWidth = layout === 'vertical' ? offset.height : offset.width;\n  if (padding === 'gap') {\n    return smallestDistanceInPercent * rangeWidth / 2;\n  }\n  if (padding === 'no-gap') {\n    var gap = getPercentValue(barCategoryGap, smallestDistanceInPercent * rangeWidth);\n    var halfBand = smallestDistanceInPercent * rangeWidth / 2;\n    return halfBand - gap - (halfBand - gap) / rangeWidth * gap;\n  }\n  return 0;\n});\nexport var selectCalculatedXAxisPadding = (state, axisId) => {\n  var xAxisSettings = selectXAxisSettings(state, axisId);\n  if (xAxisSettings == null || typeof xAxisSettings.padding !== 'string') {\n    return 0;\n  }\n  return selectCalculatedPadding(state, 'xAxis', axisId, xAxisSettings.padding);\n};\nexport var selectCalculatedYAxisPadding = (state, axisId) => {\n  var yAxisSettings = selectYAxisSettings(state, axisId);\n  if (yAxisSettings == null || typeof yAxisSettings.padding !== 'string') {\n    return 0;\n  }\n  return selectCalculatedPadding(state, 'yAxis', axisId, yAxisSettings.padding);\n};\nvar selectXAxisPadding = createSelector(selectXAxisSettings, selectCalculatedXAxisPadding, (xAxisSettings, calculated) => {\n  var _padding$left, _padding$right;\n  if (xAxisSettings == null) {\n    return {\n      left: 0,\n      right: 0\n    };\n  }\n  var {\n    padding\n  } = xAxisSettings;\n  if (typeof padding === 'string') {\n    return {\n      left: calculated,\n      right: calculated\n    };\n  }\n  return {\n    left: ((_padding$left = padding.left) !== null && _padding$left !== void 0 ? _padding$left : 0) + calculated,\n    right: ((_padding$right = padding.right) !== null && _padding$right !== void 0 ? _padding$right : 0) + calculated\n  };\n});\nvar selectYAxisPadding = createSelector(selectYAxisSettings, selectCalculatedYAxisPadding, (yAxisSettings, calculated) => {\n  var _padding$top, _padding$bottom;\n  if (yAxisSettings == null) {\n    return {\n      top: 0,\n      bottom: 0\n    };\n  }\n  var {\n    padding\n  } = yAxisSettings;\n  if (typeof padding === 'string') {\n    return {\n      top: calculated,\n      bottom: calculated\n    };\n  }\n  return {\n    top: ((_padding$top = padding.top) !== null && _padding$top !== void 0 ? _padding$top : 0) + calculated,\n    bottom: ((_padding$bottom = padding.bottom) !== null && _padding$bottom !== void 0 ? _padding$bottom : 0) + calculated\n  };\n});\nexport var combineXAxisRange = createSelector([selectChartOffsetInternal, selectXAxisPadding, selectBrushDimensions, selectBrushSettings, (_state, _axisId, isPanorama) => isPanorama], (offset, padding, brushDimensions, _ref4, isPanorama) => {\n  var {\n    padding: brushPadding\n  } = _ref4;\n  if (isPanorama) {\n    return [brushPadding.left, brushDimensions.width - brushPadding.right];\n  }\n  return [offset.left + padding.left, offset.left + offset.width - padding.right];\n});\nexport var combineYAxisRange = createSelector([selectChartOffsetInternal, selectChartLayout, selectYAxisPadding, selectBrushDimensions, selectBrushSettings, (_state, _axisId, isPanorama) => isPanorama], (offset, layout, padding, brushDimensions, _ref5, isPanorama) => {\n  var {\n    padding: brushPadding\n  } = _ref5;\n  if (isPanorama) {\n    return [brushDimensions.height - brushPadding.bottom, brushPadding.top];\n  }\n  if (layout === 'horizontal') {\n    return [offset.top + offset.height - padding.bottom, offset.top + padding.top];\n  }\n  return [offset.top + padding.top, offset.top + offset.height - padding.bottom];\n});\nexport var selectAxisRange = (state, axisType, axisId, isPanorama) => {\n  var _selectZAxisSettings;\n  switch (axisType) {\n    case 'xAxis':\n      return combineXAxisRange(state, axisId, isPanorama);\n    case 'yAxis':\n      return combineYAxisRange(state, axisId, isPanorama);\n    case 'zAxis':\n      return (_selectZAxisSettings = selectZAxisSettings(state, axisId)) === null || _selectZAxisSettings === void 0 ? void 0 : _selectZAxisSettings.range;\n    case 'angleAxis':\n      return selectAngleAxisRange(state);\n    case 'radiusAxis':\n      return selectRadiusAxisRange(state, axisId);\n    default:\n      return undefined;\n  }\n};\nexport var selectAxisRangeWithReverse = createSelector([selectBaseAxis, selectAxisRange], combineAxisRangeWithReverse);\nexport var selectAxisScale = createSelector([selectBaseAxis, selectRealScaleType, selectAxisDomainIncludingNiceTicks, selectAxisRangeWithReverse], combineScaleFunction);\nexport var selectErrorBarsSettings = createSelector([selectCartesianItemsSettings, selectAllErrorBarSettings, pickAxisType], combineRelevantErrorBarSettings);\nfunction compareIds(a, b) {\n  if (a.id < b.id) {\n    return -1;\n  }\n  if (a.id > b.id) {\n    return 1;\n  }\n  return 0;\n}\nvar pickAxisOrientation = (_state, orientation) => orientation;\nvar pickMirror = (_state, _orientation, mirror) => mirror;\nvar selectAllXAxesWithOffsetType = createSelector(selectAllXAxes, pickAxisOrientation, pickMirror, (allAxes, orientation, mirror) => allAxes.filter(axis => axis.orientation === orientation).filter(axis => axis.mirror === mirror).sort(compareIds));\nvar selectAllYAxesWithOffsetType = createSelector(selectAllYAxes, pickAxisOrientation, pickMirror, (allAxes, orientation, mirror) => allAxes.filter(axis => axis.orientation === orientation).filter(axis => axis.mirror === mirror).sort(compareIds));\nvar getXAxisSize = (offset, axisSettings) => {\n  return {\n    width: offset.width,\n    height: axisSettings.height\n  };\n};\nvar getYAxisSize = (offset, axisSettings) => {\n  var width = typeof axisSettings.width === 'number' ? axisSettings.width : DEFAULT_Y_AXIS_WIDTH;\n  return {\n    width,\n    height: offset.height\n  };\n};\nexport var selectXAxisSize = createSelector(selectChartOffsetInternal, selectXAxisSettings, getXAxisSize);\nvar combineXAxisPositionStartingPoint = (offset, orientation, chartHeight) => {\n  switch (orientation) {\n    case 'top':\n      return offset.top;\n    case 'bottom':\n      return chartHeight - offset.bottom;\n    default:\n      return 0;\n  }\n};\nvar combineYAxisPositionStartingPoint = (offset, orientation, chartWidth) => {\n  switch (orientation) {\n    case 'left':\n      return offset.left;\n    case 'right':\n      return chartWidth - offset.right;\n    default:\n      return 0;\n  }\n};\nexport var selectAllXAxesOffsetSteps = createSelector(selectChartHeight, selectChartOffsetInternal, selectAllXAxesWithOffsetType, pickAxisOrientation, pickMirror, (chartHeight, offset, allAxesWithSameOffsetType, orientation, mirror) => {\n  var steps = {};\n  var position;\n  allAxesWithSameOffsetType.forEach(axis => {\n    var axisSize = getXAxisSize(offset, axis);\n    if (position == null) {\n      position = combineXAxisPositionStartingPoint(offset, orientation, chartHeight);\n    }\n    var needSpace = orientation === 'top' && !mirror || orientation === 'bottom' && mirror;\n    steps[axis.id] = position - Number(needSpace) * axisSize.height;\n    position += (needSpace ? -1 : 1) * axisSize.height;\n  });\n  return steps;\n});\nexport var selectAllYAxesOffsetSteps = createSelector(selectChartWidth, selectChartOffsetInternal, selectAllYAxesWithOffsetType, pickAxisOrientation, pickMirror, (chartWidth, offset, allAxesWithSameOffsetType, orientation, mirror) => {\n  var steps = {};\n  var position;\n  allAxesWithSameOffsetType.forEach(axis => {\n    var axisSize = getYAxisSize(offset, axis);\n    if (position == null) {\n      position = combineYAxisPositionStartingPoint(offset, orientation, chartWidth);\n    }\n    var needSpace = orientation === 'left' && !mirror || orientation === 'right' && mirror;\n    steps[axis.id] = position - Number(needSpace) * axisSize.width;\n    position += (needSpace ? -1 : 1) * axisSize.width;\n  });\n  return steps;\n});\nvar selectXAxisOffsetSteps = (state, axisId) => {\n  var axisSettings = selectXAxisSettings(state, axisId);\n  if (axisSettings == null) {\n    return undefined;\n  }\n  return selectAllXAxesOffsetSteps(state, axisSettings.orientation, axisSettings.mirror);\n};\nexport var selectXAxisPosition = createSelector([selectChartOffsetInternal, selectXAxisSettings, selectXAxisOffsetSteps, (_, axisId) => axisId], (offset, axisSettings, allSteps, axisId) => {\n  if (axisSettings == null) {\n    return undefined;\n  }\n  var stepOfThisAxis = allSteps === null || allSteps === void 0 ? void 0 : allSteps[axisId];\n  if (stepOfThisAxis == null) {\n    return {\n      x: offset.left,\n      y: 0\n    };\n  }\n  return {\n    x: offset.left,\n    y: stepOfThisAxis\n  };\n});\nvar selectYAxisOffsetSteps = (state, axisId) => {\n  var axisSettings = selectYAxisSettings(state, axisId);\n  if (axisSettings == null) {\n    return undefined;\n  }\n  return selectAllYAxesOffsetSteps(state, axisSettings.orientation, axisSettings.mirror);\n};\nexport var selectYAxisPosition = createSelector([selectChartOffsetInternal, selectYAxisSettings, selectYAxisOffsetSteps, (_, axisId) => axisId], (offset, axisSettings, allSteps, axisId) => {\n  if (axisSettings == null) {\n    return undefined;\n  }\n  var stepOfThisAxis = allSteps === null || allSteps === void 0 ? void 0 : allSteps[axisId];\n  if (stepOfThisAxis == null) {\n    return {\n      x: 0,\n      y: offset.top\n    };\n  }\n  return {\n    x: stepOfThisAxis,\n    y: offset.top\n  };\n});\nexport var selectYAxisSize = createSelector(selectChartOffsetInternal, selectYAxisSettings, (offset, axisSettings) => {\n  var width = typeof axisSettings.width === 'number' ? axisSettings.width : DEFAULT_Y_AXIS_WIDTH;\n  return {\n    width,\n    height: offset.height\n  };\n});\nexport var selectCartesianAxisSize = (state, axisType, axisId) => {\n  switch (axisType) {\n    case 'xAxis':\n      {\n        return selectXAxisSize(state, axisId).width;\n      }\n    case 'yAxis':\n      {\n        return selectYAxisSize(state, axisId).height;\n      }\n    default:\n      {\n        return undefined;\n      }\n  }\n};\nexport var combineDuplicateDomain = (chartLayout, appliedValues, axis, axisType) => {\n  if (axis == null) {\n    return undefined;\n  }\n  var {\n    allowDuplicatedCategory,\n    type,\n    dataKey\n  } = axis;\n  var isCategorical = isCategoricalAxis(chartLayout, axisType);\n  var allData = appliedValues.map(av => av.value);\n  if (dataKey && isCategorical && type === 'category' && allowDuplicatedCategory && hasDuplicate(allData)) {\n    return allData;\n  }\n  return undefined;\n};\nexport var selectDuplicateDomain = createSelector([selectChartLayout, selectAllAppliedValues, selectBaseAxis, pickAxisType], combineDuplicateDomain);\nexport var combineCategoricalDomain = (layout, appliedValues, axis, axisType) => {\n  if (axis == null || axis.dataKey == null) {\n    return undefined;\n  }\n  var {\n    type,\n    scale\n  } = axis;\n  var isCategorical = isCategoricalAxis(layout, axisType);\n  if (isCategorical && (type === 'number' || scale !== 'auto')) {\n    return appliedValues.map(d => d.value);\n  }\n  return undefined;\n};\nexport var selectCategoricalDomain = createSelector([selectChartLayout, selectAllAppliedValues, selectAxisSettings, pickAxisType], combineCategoricalDomain);\nexport var selectAxisPropsNeededForCartesianGridTicksGenerator = createSelector([selectChartLayout, selectCartesianAxisSettings, selectRealScaleType, selectAxisScale, selectDuplicateDomain, selectCategoricalDomain, selectAxisRange, selectNiceTicks, pickAxisType], (layout, axis, realScaleType, scale, duplicateDomain, categoricalDomain, axisRange, niceTicks, axisType) => {\n  if (axis == null) {\n    return null;\n  }\n  var isCategorical = isCategoricalAxis(layout, axisType);\n  return {\n    angle: axis.angle,\n    interval: axis.interval,\n    minTickGap: axis.minTickGap,\n    orientation: axis.orientation,\n    tick: axis.tick,\n    tickCount: axis.tickCount,\n    tickFormatter: axis.tickFormatter,\n    ticks: axis.ticks,\n    type: axis.type,\n    unit: axis.unit,\n    axisType,\n    categoricalDomain,\n    duplicateDomain,\n    isCategorical,\n    niceTicks,\n    range: axisRange,\n    realScaleType,\n    scale\n  };\n});\nexport var combineAxisTicks = (layout, axis, realScaleType, scale, niceTicks, axisRange, duplicateDomain, categoricalDomain, axisType) => {\n  if (axis == null || scale == null) {\n    return undefined;\n  }\n  var isCategorical = isCategoricalAxis(layout, axisType);\n  var {\n    type,\n    ticks,\n    tickCount\n  } = axis;\n\n  // This is testing for `scaleBand` but for band axis the type is reported as `band` so this looks like a dead code with a workaround elsewhere?\n  var offsetForBand = realScaleType === 'scaleBand' && typeof scale.bandwidth === 'function' ? scale.bandwidth() / 2 : 2;\n  var offset = type === 'category' && scale.bandwidth ? scale.bandwidth() / offsetForBand : 0;\n  offset = axisType === 'angleAxis' && axisRange != null && axisRange.length >= 2 ? mathSign(axisRange[0] - axisRange[1]) * 2 * offset : offset;\n\n  // The ticks set by user should only affect the ticks adjacent to axis line\n  var ticksOrNiceTicks = ticks || niceTicks;\n  if (ticksOrNiceTicks) {\n    var result = ticksOrNiceTicks.map((entry, index) => {\n      var scaleContent = duplicateDomain ? duplicateDomain.indexOf(entry) : entry;\n      return {\n        index,\n        // If the scaleContent is not a number, the coordinate will be NaN.\n        // That could be the case for example with a PointScale and a string as domain.\n        coordinate: scale(scaleContent) + offset,\n        value: entry,\n        offset\n      };\n    });\n    return result.filter(row => !isNan(row.coordinate));\n  }\n\n  // When axis is a categorical axis, but the type of axis is number or the scale of axis is not \"auto\"\n  if (isCategorical && categoricalDomain) {\n    return categoricalDomain.map((entry, index) => ({\n      coordinate: scale(entry) + offset,\n      value: entry,\n      index,\n      offset\n    }));\n  }\n  if (scale.ticks) {\n    return scale.ticks(tickCount)\n    // @ts-expect-error why does the offset go here? The type does not require it\n    .map(entry => ({\n      coordinate: scale(entry) + offset,\n      value: entry,\n      offset\n    }));\n  }\n\n  // When axis has duplicated text, serial numbers are used to generate scale\n  return scale.domain().map((entry, index) => ({\n    coordinate: scale(entry) + offset,\n    value: duplicateDomain ? duplicateDomain[entry] : entry,\n    index,\n    offset\n  }));\n};\nexport var selectTicksOfAxis = createSelector([selectChartLayout, selectAxisSettings, selectRealScaleType, selectAxisScale, selectNiceTicks, selectAxisRange, selectDuplicateDomain, selectCategoricalDomain, pickAxisType], combineAxisTicks);\nexport var combineGraphicalItemTicks = (layout, axis, scale, axisRange, duplicateDomain, categoricalDomain, axisType) => {\n  if (axis == null || scale == null || axisRange == null || axisRange[0] === axisRange[1]) {\n    return undefined;\n  }\n  var isCategorical = isCategoricalAxis(layout, axisType);\n  var {\n    tickCount\n  } = axis;\n  var offset = 0;\n  offset = axisType === 'angleAxis' && (axisRange === null || axisRange === void 0 ? void 0 : axisRange.length) >= 2 ? mathSign(axisRange[0] - axisRange[1]) * 2 * offset : offset;\n\n  // When axis is a categorical axis, but the type of axis is number or the scale of axis is not \"auto\"\n  if (isCategorical && categoricalDomain) {\n    return categoricalDomain.map((entry, index) => ({\n      coordinate: scale(entry) + offset,\n      value: entry,\n      index,\n      offset\n    }));\n  }\n  if (scale.ticks) {\n    return scale.ticks(tickCount)\n    // @ts-expect-error why does the offset go here? The type does not require it\n    .map(entry => ({\n      coordinate: scale(entry) + offset,\n      value: entry,\n      offset\n    }));\n  }\n\n  // When axis has duplicated text, serial numbers are used to generate scale\n  return scale.domain().map((entry, index) => ({\n    coordinate: scale(entry) + offset,\n    value: duplicateDomain ? duplicateDomain[entry] : entry,\n    index,\n    offset\n  }));\n};\nexport var selectTicksOfGraphicalItem = createSelector([selectChartLayout, selectAxisSettings, selectAxisScale, selectAxisRange, selectDuplicateDomain, selectCategoricalDomain, pickAxisType], combineGraphicalItemTicks);\nexport var selectAxisWithScale = createSelector(selectBaseAxis, selectAxisScale, (axis, scale) => {\n  if (axis == null || scale == null) {\n    return undefined;\n  }\n  return _objectSpread(_objectSpread({}, axis), {}, {\n    scale\n  });\n});\nvar selectZAxisScale = createSelector([selectBaseAxis, selectRealScaleType, selectAxisDomain, selectAxisRangeWithReverse], combineScaleFunction);\nexport var selectZAxisWithScale = createSelector((state, _axisType, axisId) => selectZAxisSettings(state, axisId), selectZAxisScale, (axis, scale) => {\n  if (axis == null || scale == null) {\n    return undefined;\n  }\n  return _objectSpread(_objectSpread({}, axis), {}, {\n    scale\n  });\n});\n\n/**\n * We are also going to need to implement polar chart directions if we want to support keyboard controls for those.\n */\n\nexport var selectChartDirection = createSelector([selectChartLayout, selectAllXAxes, selectAllYAxes], (layout, allXAxes, allYAxes) => {\n  switch (layout) {\n    case 'horizontal':\n      {\n        return allXAxes.some(axis => axis.reversed) ? 'right-to-left' : 'left-to-right';\n      }\n    case 'vertical':\n      {\n        return allYAxes.some(axis => axis.reversed) ? 'bottom-to-top' : 'top-to-bottom';\n      }\n    // TODO: make this better. For now, right arrow triggers \"forward\", left arrow \"back\"\n    // however, the tooltip moves an unintuitive direction because of how the indices are rendered\n    case 'centric':\n    case 'radial':\n      {\n        return 'left-to-right';\n      }\n    default:\n      {\n        return undefined;\n      }\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}