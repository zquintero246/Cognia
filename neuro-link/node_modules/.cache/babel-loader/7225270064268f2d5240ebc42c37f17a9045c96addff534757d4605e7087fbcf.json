{"ast":null,"code":"import { collectMotionValues, motionValue } from './index.mjs';\nimport { subscribeValue } from './subscribe-value.mjs';\n\n/**\r\n * Create a `MotionValue` that transforms the output of other `MotionValue`s by\r\n * passing their latest values through a transform function.\r\n *\r\n * Whenever a `MotionValue` referred to in the provided function is updated,\r\n * it will be re-evaluated.\r\n *\r\n * ```jsx\r\n * const x = motionValue(0)\r\n * const y = transformValue(() => x.get() * 2) // double x\r\n * ```\r\n *\r\n * @param transformer - A transform function. This function must be pure with no side-effects or conditional statements.\r\n * @returns `MotionValue`\r\n *\r\n * @public\r\n */\nfunction transformValue(transform) {\n  const collectedValues = [];\n  /**\r\n   * Open session of collectMotionValues. Any MotionValue that calls get()\r\n   * inside transform will be saved into this array.\r\n   */\n  collectMotionValues.current = collectedValues;\n  const initialValue = transform();\n  collectMotionValues.current = undefined;\n  const value = motionValue(initialValue);\n  subscribeValue(collectedValues, value, transform);\n  return value;\n}\nexport { transformValue };","map":{"version":3,"names":["collectMotionValues","motionValue","subscribeValue","transformValue","transform","collectedValues","current","initialValue","undefined","value"],"sources":["C:/Users/Zabdiel Julian/Downloads/Cognia-dev/neuro-link/node_modules/motion-dom/dist/es/value/transform-value.mjs"],"sourcesContent":["import { collectMotionValues, motionValue } from './index.mjs';\r\nimport { subscribeValue } from './subscribe-value.mjs';\r\n\r\n/**\r\n * Create a `MotionValue` that transforms the output of other `MotionValue`s by\r\n * passing their latest values through a transform function.\r\n *\r\n * Whenever a `MotionValue` referred to in the provided function is updated,\r\n * it will be re-evaluated.\r\n *\r\n * ```jsx\r\n * const x = motionValue(0)\r\n * const y = transformValue(() => x.get() * 2) // double x\r\n * ```\r\n *\r\n * @param transformer - A transform function. This function must be pure with no side-effects or conditional statements.\r\n * @returns `MotionValue`\r\n *\r\n * @public\r\n */\r\nfunction transformValue(transform) {\r\n    const collectedValues = [];\r\n    /**\r\n     * Open session of collectMotionValues. Any MotionValue that calls get()\r\n     * inside transform will be saved into this array.\r\n     */\r\n    collectMotionValues.current = collectedValues;\r\n    const initialValue = transform();\r\n    collectMotionValues.current = undefined;\r\n    const value = motionValue(initialValue);\r\n    subscribeValue(collectedValues, value, transform);\r\n    return value;\r\n}\r\n\r\nexport { transformValue };\r\n"],"mappings":"AAAA,SAASA,mBAAmB,EAAEC,WAAW,QAAQ,aAAa;AAC9D,SAASC,cAAc,QAAQ,uBAAuB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,SAAS,EAAE;EAC/B,MAAMC,eAAe,GAAG,EAAE;EAC1B;AACJ;AACA;AACA;EACIL,mBAAmB,CAACM,OAAO,GAAGD,eAAe;EAC7C,MAAME,YAAY,GAAGH,SAAS,CAAC,CAAC;EAChCJ,mBAAmB,CAACM,OAAO,GAAGE,SAAS;EACvC,MAAMC,KAAK,GAAGR,WAAW,CAACM,YAAY,CAAC;EACvCL,cAAc,CAACG,eAAe,EAAEI,KAAK,EAAEL,SAAS,CAAC;EACjD,OAAOK,KAAK;AAChB;AAEA,SAASN,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}