{"ast":null,"code":"\"use strict\";\n\nvar defaultParseOptions = {\n  decodeValues: true,\n  map: false,\n  silent: false\n};\nfunction isNonEmptyString(str) {\n  return typeof str === \"string\" && !!str.trim();\n}\nfunction parseString(setCookieValue, options) {\n  var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n  var nameValuePairStr = parts.shift();\n  var parsed = parseNameValuePair(nameValuePairStr);\n  var name = parsed.name;\n  var value = parsed.value;\n  options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n  try {\n    value = options.decodeValues ? decodeURIComponent(value) : value; // decode cookie value\n  } catch (e) {\n    console.error(\"set-cookie-parser encountered an error while decoding a cookie with value '\" + value + \"'. Set options.decodeValues to false to disable this feature.\", e);\n  }\n  var cookie = {\n    name: name,\n    value: value\n  };\n  parts.forEach(function (part) {\n    var sides = part.split(\"=\");\n    var key = sides.shift().trimLeft().toLowerCase();\n    var value = sides.join(\"=\");\n    if (key === \"expires\") {\n      cookie.expires = new Date(value);\n    } else if (key === \"max-age\") {\n      cookie.maxAge = parseInt(value, 10);\n    } else if (key === \"secure\") {\n      cookie.secure = true;\n    } else if (key === \"httponly\") {\n      cookie.httpOnly = true;\n    } else if (key === \"samesite\") {\n      cookie.sameSite = value;\n    } else if (key === \"partitioned\") {\n      cookie.partitioned = true;\n    } else {\n      cookie[key] = value;\n    }\n  });\n  return cookie;\n}\nfunction parseNameValuePair(nameValuePairStr) {\n  // Parses name-value-pair according to rfc6265bis draft\n\n  var name = \"\";\n  var value = \"\";\n  var nameValueArr = nameValuePairStr.split(\"=\");\n  if (nameValueArr.length > 1) {\n    name = nameValueArr.shift();\n    value = nameValueArr.join(\"=\"); // everything after the first =, joined by a \"=\" if there was more than one part\n  } else {\n    value = nameValuePairStr;\n  }\n  return {\n    name: name,\n    value: value\n  };\n}\nfunction parse(input, options) {\n  options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n  if (!input) {\n    if (!options.map) {\n      return [];\n    } else {\n      return {};\n    }\n  }\n  if (input.headers) {\n    if (typeof input.headers.getSetCookie === \"function\") {\n      // for fetch responses - they combine headers of the same type in the headers array,\n      // but getSetCookie returns an uncombined array\n      input = input.headers.getSetCookie();\n    } else if (input.headers[\"set-cookie\"]) {\n      // fast-path for node.js (which automatically normalizes header names to lower-case\n      input = input.headers[\"set-cookie\"];\n    } else {\n      // slow-path for other environments - see #25\n      var sch = input.headers[Object.keys(input.headers).find(function (key) {\n        return key.toLowerCase() === \"set-cookie\";\n      })];\n      // warn if called on a request-like object with a cookie header rather than a set-cookie header - see #34, 36\n      if (!sch && input.headers.cookie && !options.silent) {\n        console.warn(\"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\");\n      }\n      input = sch;\n    }\n  }\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n  if (!options.map) {\n    return input.filter(isNonEmptyString).map(function (str) {\n      return parseString(str, options);\n    });\n  } else {\n    var cookies = {};\n    return input.filter(isNonEmptyString).reduce(function (cookies, str) {\n      var cookie = parseString(str, options);\n      cookies[cookie.name] = cookie;\n      return cookies;\n    }, cookies);\n  }\n}\n\n/*\r\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\r\n  that are within a single set-cookie field-value, such as in the Expires portion.\r\n\r\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\r\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\r\n  React Native's fetch does this for *every* header, including set-cookie.\r\n\r\n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\r\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\r\n*/\nfunction splitCookiesString(cookiesString) {\n  if (Array.isArray(cookiesString)) {\n    return cookiesString;\n  }\n  if (typeof cookiesString !== \"string\") {\n    return [];\n  }\n  var cookiesStrings = [];\n  var pos = 0;\n  var start;\n  var ch;\n  var lastComma;\n  var nextStart;\n  var cookiesSeparatorFound;\n  function skipWhitespace() {\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n      pos += 1;\n    }\n    return pos < cookiesString.length;\n  }\n  function notSpecialChar() {\n    ch = cookiesString.charAt(pos);\n    return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n  }\n  while (pos < cookiesString.length) {\n    start = pos;\n    cookiesSeparatorFound = false;\n    while (skipWhitespace()) {\n      ch = cookiesString.charAt(pos);\n      if (ch === \",\") {\n        // ',' is a cookie separator if we have later first '=', not ';' or ','\n        lastComma = pos;\n        pos += 1;\n        skipWhitespace();\n        nextStart = pos;\n        while (pos < cookiesString.length && notSpecialChar()) {\n          pos += 1;\n        }\n\n        // currently special character\n        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n          // we found cookies separator\n          cookiesSeparatorFound = true;\n          // pos is inside the next cookie, so back up and return it.\n          pos = nextStart;\n          cookiesStrings.push(cookiesString.substring(start, lastComma));\n          start = pos;\n        } else {\n          // in param ',' or param separator ';',\n          // we continue from that comma\n          pos = lastComma + 1;\n        }\n      } else {\n        pos += 1;\n      }\n    }\n    if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n    }\n  }\n  return cookiesStrings;\n}\nmodule.exports = parse;\nmodule.exports.parse = parse;\nmodule.exports.parseString = parseString;\nmodule.exports.splitCookiesString = splitCookiesString;","map":{"version":3,"names":["defaultParseOptions","decodeValues","map","silent","isNonEmptyString","str","trim","parseString","setCookieValue","options","parts","split","filter","nameValuePairStr","shift","parsed","parseNameValuePair","name","value","Object","assign","decodeURIComponent","e","console","error","cookie","forEach","part","sides","key","trimLeft","toLowerCase","join","expires","Date","maxAge","parseInt","secure","httpOnly","sameSite","partitioned","nameValueArr","length","parse","input","headers","getSetCookie","sch","keys","find","warn","Array","isArray","cookies","reduce","splitCookiesString","cookiesString","cookiesStrings","pos","start","ch","lastComma","nextStart","cookiesSeparatorFound","skipWhitespace","test","charAt","notSpecialChar","push","substring","module","exports"],"sources":["C:/Users/LENOVO LOQ/Documents/GitHub/Cognia/neuro-link/node_modules/set-cookie-parser/lib/set-cookie.js"],"sourcesContent":["\"use strict\";\r\n\r\nvar defaultParseOptions = {\r\n  decodeValues: true,\r\n  map: false,\r\n  silent: false,\r\n};\r\n\r\nfunction isNonEmptyString(str) {\r\n  return typeof str === \"string\" && !!str.trim();\r\n}\r\n\r\nfunction parseString(setCookieValue, options) {\r\n  var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\r\n\r\n  var nameValuePairStr = parts.shift();\r\n  var parsed = parseNameValuePair(nameValuePairStr);\r\n  var name = parsed.name;\r\n  var value = parsed.value;\r\n\r\n  options = options\r\n    ? Object.assign({}, defaultParseOptions, options)\r\n    : defaultParseOptions;\r\n\r\n  try {\r\n    value = options.decodeValues ? decodeURIComponent(value) : value; // decode cookie value\r\n  } catch (e) {\r\n    console.error(\r\n      \"set-cookie-parser encountered an error while decoding a cookie with value '\" +\r\n        value +\r\n        \"'. Set options.decodeValues to false to disable this feature.\",\r\n      e\r\n    );\r\n  }\r\n\r\n  var cookie = {\r\n    name: name,\r\n    value: value,\r\n  };\r\n\r\n  parts.forEach(function (part) {\r\n    var sides = part.split(\"=\");\r\n    var key = sides.shift().trimLeft().toLowerCase();\r\n    var value = sides.join(\"=\");\r\n    if (key === \"expires\") {\r\n      cookie.expires = new Date(value);\r\n    } else if (key === \"max-age\") {\r\n      cookie.maxAge = parseInt(value, 10);\r\n    } else if (key === \"secure\") {\r\n      cookie.secure = true;\r\n    } else if (key === \"httponly\") {\r\n      cookie.httpOnly = true;\r\n    } else if (key === \"samesite\") {\r\n      cookie.sameSite = value;\r\n    } else if (key === \"partitioned\") {\r\n      cookie.partitioned = true;\r\n    } else {\r\n      cookie[key] = value;\r\n    }\r\n  });\r\n\r\n  return cookie;\r\n}\r\n\r\nfunction parseNameValuePair(nameValuePairStr) {\r\n  // Parses name-value-pair according to rfc6265bis draft\r\n\r\n  var name = \"\";\r\n  var value = \"\";\r\n  var nameValueArr = nameValuePairStr.split(\"=\");\r\n  if (nameValueArr.length > 1) {\r\n    name = nameValueArr.shift();\r\n    value = nameValueArr.join(\"=\"); // everything after the first =, joined by a \"=\" if there was more than one part\r\n  } else {\r\n    value = nameValuePairStr;\r\n  }\r\n\r\n  return { name: name, value: value };\r\n}\r\n\r\nfunction parse(input, options) {\r\n  options = options\r\n    ? Object.assign({}, defaultParseOptions, options)\r\n    : defaultParseOptions;\r\n\r\n  if (!input) {\r\n    if (!options.map) {\r\n      return [];\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  if (input.headers) {\r\n    if (typeof input.headers.getSetCookie === \"function\") {\r\n      // for fetch responses - they combine headers of the same type in the headers array,\r\n      // but getSetCookie returns an uncombined array\r\n      input = input.headers.getSetCookie();\r\n    } else if (input.headers[\"set-cookie\"]) {\r\n      // fast-path for node.js (which automatically normalizes header names to lower-case\r\n      input = input.headers[\"set-cookie\"];\r\n    } else {\r\n      // slow-path for other environments - see #25\r\n      var sch =\r\n        input.headers[\r\n          Object.keys(input.headers).find(function (key) {\r\n            return key.toLowerCase() === \"set-cookie\";\r\n          })\r\n        ];\r\n      // warn if called on a request-like object with a cookie header rather than a set-cookie header - see #34, 36\r\n      if (!sch && input.headers.cookie && !options.silent) {\r\n        console.warn(\r\n          \"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\"\r\n        );\r\n      }\r\n      input = sch;\r\n    }\r\n  }\r\n  if (!Array.isArray(input)) {\r\n    input = [input];\r\n  }\r\n\r\n  if (!options.map) {\r\n    return input.filter(isNonEmptyString).map(function (str) {\r\n      return parseString(str, options);\r\n    });\r\n  } else {\r\n    var cookies = {};\r\n    return input.filter(isNonEmptyString).reduce(function (cookies, str) {\r\n      var cookie = parseString(str, options);\r\n      cookies[cookie.name] = cookie;\r\n      return cookies;\r\n    }, cookies);\r\n  }\r\n}\r\n\r\n/*\r\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\r\n  that are within a single set-cookie field-value, such as in the Expires portion.\r\n\r\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\r\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\r\n  React Native's fetch does this for *every* header, including set-cookie.\r\n\r\n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\r\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\r\n*/\r\nfunction splitCookiesString(cookiesString) {\r\n  if (Array.isArray(cookiesString)) {\r\n    return cookiesString;\r\n  }\r\n  if (typeof cookiesString !== \"string\") {\r\n    return [];\r\n  }\r\n\r\n  var cookiesStrings = [];\r\n  var pos = 0;\r\n  var start;\r\n  var ch;\r\n  var lastComma;\r\n  var nextStart;\r\n  var cookiesSeparatorFound;\r\n\r\n  function skipWhitespace() {\r\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\r\n      pos += 1;\r\n    }\r\n    return pos < cookiesString.length;\r\n  }\r\n\r\n  function notSpecialChar() {\r\n    ch = cookiesString.charAt(pos);\r\n\r\n    return ch !== \"=\" && ch !== \";\" && ch !== \",\";\r\n  }\r\n\r\n  while (pos < cookiesString.length) {\r\n    start = pos;\r\n    cookiesSeparatorFound = false;\r\n\r\n    while (skipWhitespace()) {\r\n      ch = cookiesString.charAt(pos);\r\n      if (ch === \",\") {\r\n        // ',' is a cookie separator if we have later first '=', not ';' or ','\r\n        lastComma = pos;\r\n        pos += 1;\r\n\r\n        skipWhitespace();\r\n        nextStart = pos;\r\n\r\n        while (pos < cookiesString.length && notSpecialChar()) {\r\n          pos += 1;\r\n        }\r\n\r\n        // currently special character\r\n        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\r\n          // we found cookies separator\r\n          cookiesSeparatorFound = true;\r\n          // pos is inside the next cookie, so back up and return it.\r\n          pos = nextStart;\r\n          cookiesStrings.push(cookiesString.substring(start, lastComma));\r\n          start = pos;\r\n        } else {\r\n          // in param ',' or param separator ';',\r\n          // we continue from that comma\r\n          pos = lastComma + 1;\r\n        }\r\n      } else {\r\n        pos += 1;\r\n      }\r\n    }\r\n\r\n    if (!cookiesSeparatorFound || pos >= cookiesString.length) {\r\n      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\r\n    }\r\n  }\r\n\r\n  return cookiesStrings;\r\n}\r\n\r\nmodule.exports = parse;\r\nmodule.exports.parse = parse;\r\nmodule.exports.parseString = parseString;\r\nmodule.exports.splitCookiesString = splitCookiesString;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}