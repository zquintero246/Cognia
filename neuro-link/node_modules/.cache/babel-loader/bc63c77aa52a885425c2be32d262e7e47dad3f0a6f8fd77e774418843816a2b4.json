{"ast":null,"code":"\"use client\";\n\nimport { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\r\n * Creates a ref function that, when called, hydrates the provided\r\n * external ref and VisualElement.\r\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n  return useCallback(instance => {\n    if (instance) {\n      visualState.onMount && visualState.onMount(instance);\n    }\n    if (visualElement) {\n      if (instance) {\n        visualElement.mount(instance);\n      } else {\n        visualElement.unmount();\n      }\n    }\n    if (externalRef) {\n      if (typeof externalRef === \"function\") {\n        externalRef(instance);\n      } else if (isRefObject(externalRef)) {\n        externalRef.current = instance;\n      }\n    }\n  },\n  /**\r\n   * Include externalRef in dependencies to ensure the callback updates\r\n   * when the ref changes, allowing proper ref forwarding.\r\n   */\n  [visualElement]);\n}\nexport { useMotionRef };","map":{"version":3,"names":["useCallback","isRefObject","useMotionRef","visualState","visualElement","externalRef","instance","onMount","mount","unmount","current"],"sources":["C:/Users/Zabdiel Julian/Downloads/Cognia-dev/neuro-link/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs"],"sourcesContent":["\"use client\";\r\nimport { useCallback } from 'react';\r\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\r\n\r\n/**\r\n * Creates a ref function that, when called, hydrates the provided\r\n * external ref and VisualElement.\r\n */\r\nfunction useMotionRef(visualState, visualElement, externalRef) {\r\n    return useCallback((instance) => {\r\n        if (instance) {\r\n            visualState.onMount && visualState.onMount(instance);\r\n        }\r\n        if (visualElement) {\r\n            if (instance) {\r\n                visualElement.mount(instance);\r\n            }\r\n            else {\r\n                visualElement.unmount();\r\n            }\r\n        }\r\n        if (externalRef) {\r\n            if (typeof externalRef === \"function\") {\r\n                externalRef(instance);\r\n            }\r\n            else if (isRefObject(externalRef)) {\r\n                externalRef.current = instance;\r\n            }\r\n        }\r\n    }, \r\n    /**\r\n     * Include externalRef in dependencies to ensure the callback updates\r\n     * when the ref changes, allowing proper ref forwarding.\r\n     */\r\n    [visualElement]);\r\n}\r\n\r\nexport { useMotionRef };\r\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,QAAQ,+BAA+B;;AAE3D;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAACC,WAAW,EAAEC,aAAa,EAAEC,WAAW,EAAE;EAC3D,OAAOL,WAAW,CAAEM,QAAQ,IAAK;IAC7B,IAAIA,QAAQ,EAAE;MACVH,WAAW,CAACI,OAAO,IAAIJ,WAAW,CAACI,OAAO,CAACD,QAAQ,CAAC;IACxD;IACA,IAAIF,aAAa,EAAE;MACf,IAAIE,QAAQ,EAAE;QACVF,aAAa,CAACI,KAAK,CAACF,QAAQ,CAAC;MACjC,CAAC,MACI;QACDF,aAAa,CAACK,OAAO,CAAC,CAAC;MAC3B;IACJ;IACA,IAAIJ,WAAW,EAAE;MACb,IAAI,OAAOA,WAAW,KAAK,UAAU,EAAE;QACnCA,WAAW,CAACC,QAAQ,CAAC;MACzB,CAAC,MACI,IAAIL,WAAW,CAACI,WAAW,CAAC,EAAE;QAC/BA,WAAW,CAACK,OAAO,GAAGJ,QAAQ;MAClC;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;EACI,CAACF,aAAa,CAAC,CAAC;AACpB;AAEA,SAASF,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}