{"ast":null,"code":"\"use client\";\n\nimport { isMotionValue } from 'motion-dom';\nimport { useCombineMotionValues } from './use-combine-values.mjs';\n\n/**\r\n * Combine multiple motion values into a new one using a string template literal.\r\n *\r\n * ```jsx\r\n * import {\r\n *   motion,\r\n *   useSpring,\r\n *   useMotionValue,\r\n *   useMotionTemplate\r\n * } from \"framer-motion\"\r\n *\r\n * function Component() {\r\n *   const shadowX = useSpring(0)\r\n *   const shadowY = useMotionValue(0)\r\n *   const shadow = useMotionTemplate`drop-shadow(${shadowX}px ${shadowY}px 20px rgba(0,0,0,0.3))`\r\n *\r\n *   return <motion.div style={{ filter: shadow }} />\r\n * }\r\n * ```\r\n *\r\n * @public\r\n */\nfunction useMotionTemplate(fragments, ...values) {\n  /**\r\n   * Create a function that will build a string from the latest motion values.\r\n   */\n  const numFragments = fragments.length;\n  function buildValue() {\n    let output = ``;\n    for (let i = 0; i < numFragments; i++) {\n      output += fragments[i];\n      const value = values[i];\n      if (value) {\n        output += isMotionValue(value) ? value.get() : value;\n      }\n    }\n    return output;\n  }\n  return useCombineMotionValues(values.filter(isMotionValue), buildValue);\n}\nexport { useMotionTemplate };","map":{"version":3,"names":["isMotionValue","useCombineMotionValues","useMotionTemplate","fragments","values","numFragments","length","buildValue","output","i","value","get","filter"],"sources":["C:/Users/Zabdiel Julian/Downloads/Cognia-dev/neuro-link/node_modules/framer-motion/dist/es/value/use-motion-template.mjs"],"sourcesContent":["\"use client\";\r\nimport { isMotionValue } from 'motion-dom';\r\nimport { useCombineMotionValues } from './use-combine-values.mjs';\r\n\r\n/**\r\n * Combine multiple motion values into a new one using a string template literal.\r\n *\r\n * ```jsx\r\n * import {\r\n *   motion,\r\n *   useSpring,\r\n *   useMotionValue,\r\n *   useMotionTemplate\r\n * } from \"framer-motion\"\r\n *\r\n * function Component() {\r\n *   const shadowX = useSpring(0)\r\n *   const shadowY = useMotionValue(0)\r\n *   const shadow = useMotionTemplate`drop-shadow(${shadowX}px ${shadowY}px 20px rgba(0,0,0,0.3))`\r\n *\r\n *   return <motion.div style={{ filter: shadow }} />\r\n * }\r\n * ```\r\n *\r\n * @public\r\n */\r\nfunction useMotionTemplate(fragments, ...values) {\r\n    /**\r\n     * Create a function that will build a string from the latest motion values.\r\n     */\r\n    const numFragments = fragments.length;\r\n    function buildValue() {\r\n        let output = ``;\r\n        for (let i = 0; i < numFragments; i++) {\r\n            output += fragments[i];\r\n            const value = values[i];\r\n            if (value) {\r\n                output += isMotionValue(value) ? value.get() : value;\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n    return useCombineMotionValues(values.filter(isMotionValue), buildValue);\r\n}\r\n\r\nexport { useMotionTemplate };\r\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,aAAa,QAAQ,YAAY;AAC1C,SAASC,sBAAsB,QAAQ,0BAA0B;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAACC,SAAS,EAAE,GAAGC,MAAM,EAAE;EAC7C;AACJ;AACA;EACI,MAAMC,YAAY,GAAGF,SAAS,CAACG,MAAM;EACrC,SAASC,UAAUA,CAAA,EAAG;IAClB,IAAIC,MAAM,GAAG,EAAE;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,YAAY,EAAEI,CAAC,EAAE,EAAE;MACnCD,MAAM,IAAIL,SAAS,CAACM,CAAC,CAAC;MACtB,MAAMC,KAAK,GAAGN,MAAM,CAACK,CAAC,CAAC;MACvB,IAAIC,KAAK,EAAE;QACPF,MAAM,IAAIR,aAAa,CAACU,KAAK,CAAC,GAAGA,KAAK,CAACC,GAAG,CAAC,CAAC,GAAGD,KAAK;MACxD;IACJ;IACA,OAAOF,MAAM;EACjB;EACA,OAAOP,sBAAsB,CAACG,MAAM,CAACQ,MAAM,CAACZ,aAAa,CAAC,EAAEO,UAAU,CAAC;AAC3E;AAEA,SAASL,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}