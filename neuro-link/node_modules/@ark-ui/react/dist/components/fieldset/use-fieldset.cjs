'use client';
'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const domQuery = require('@zag-js/dom-query');
const react = require('react');
const useEnvironmentContext = require('../../providers/environment/use-environment-context.cjs');
const useSafeLayoutEffect = require('../../utils/use-safe-layout-effect.cjs');
const fieldset_anatomy = require('./fieldset.anatomy.cjs');

const useFieldset = (props = {}) => {
  const { disabled = false, invalid = false } = props;
  const env = useEnvironmentContext.useEnvironmentContext();
  const hasErrorText = react.useRef(false);
  const hasHelperText = react.useRef(false);
  const uid = react.useId();
  const id = props.id ?? uid;
  const rootRef = react.useRef(null);
  const legendId = `fieldset::${id}::legend`;
  const errorTextId = `fieldset::${id}::error-text`;
  const helperTextId = `fieldset::${id}::helper-text`;
  useSafeLayoutEffect.useSafeLayoutEffect(() => {
    const rootNode = rootRef.current;
    if (!rootNode) return;
    const checkTextElements = () => {
      const docOrShadowRoot = env.getRootNode();
      hasErrorText.current = !!docOrShadowRoot.getElementById(errorTextId);
      hasHelperText.current = !!docOrShadowRoot.getElementById(helperTextId);
    };
    checkTextElements();
    const win = env.getWindow();
    const observer = new win.MutationObserver(checkTextElements);
    observer.observe(rootNode, { childList: true, subtree: true });
    return () => observer.disconnect();
  }, [env, errorTextId, helperTextId]);
  const labelIds = react.useMemo(() => {
    const ids = [];
    if (hasErrorText.current && invalid) ids.push(errorTextId);
    if (hasHelperText.current) ids.push(helperTextId);
    return ids.join(" ") || void 0;
  }, [invalid, errorTextId, helperTextId]);
  const getRootProps = react.useMemo(
    () => () => ({
      ...fieldset_anatomy.parts.root.attrs,
      ref: rootRef,
      disabled,
      "data-disabled": domQuery.dataAttr(disabled),
      "data-invalid": domQuery.dataAttr(invalid),
      "aria-labelledby": legendId,
      "aria-describedby": labelIds
    }),
    [disabled, invalid, legendId, labelIds]
  );
  const getLegendProps = react.useMemo(
    () => () => ({
      id: legendId,
      ...fieldset_anatomy.parts.legend.attrs,
      "data-disabled": domQuery.dataAttr(disabled),
      "data-invalid": domQuery.dataAttr(invalid)
    }),
    [legendId, disabled, invalid]
  );
  const getHelperTextProps = react.useMemo(
    () => () => ({
      id: helperTextId,
      ...fieldset_anatomy.parts.helperText.attrs
    }),
    [helperTextId]
  );
  const getErrorTextProps = react.useMemo(
    () => () => ({
      id: errorTextId,
      ...fieldset_anatomy.parts.errorText.attrs,
      "aria-live": "polite"
    }),
    [errorTextId]
  );
  return {
    refs: {
      rootRef
    },
    disabled,
    invalid,
    getRootProps,
    getLegendProps,
    getHelperTextProps,
    getErrorTextProps
  };
};

exports.useFieldset = useFieldset;
